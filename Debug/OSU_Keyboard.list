
OSU_Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008438  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008544  08008544  00018544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085b0  080085b0  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  080085b0  080085b0  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085b0  080085b0  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085b4  080085b4  000185b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  080085b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000096c  200001d0  08008788  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b3c  08008788  00020b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f8c  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b18  00000000  00000000  000331c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  00036ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e74  00000000  00000000  00038008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b236  00000000  00000000  00038e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019470  00000000  00000000  000540b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e9d2  00000000  00000000  0006d522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cdc  00000000  00000000  000fbef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00100bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d0 	.word	0x200001d0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800852c 	.word	0x0800852c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d4 	.word	0x200001d4
 8000148:	0800852c 	.word	0x0800852c

0800014c <App_Init>:
#include "main.h"
#include "usbd_hid.h"


void App_Init()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	display_init();
 8000150:	f000 fa64 	bl	800061c <display_init>

	while(1)
	{
		Buttons_Check();
 8000154:	f000 f8f4 	bl	8000340 <Buttons_Check>
		LED_Update();
 8000158:	f000 fa8e 	bl	8000678 <LED_Update>
	{
 800015c:	e7fa      	b.n	8000154 <App_Init+0x8>
	...

08000160 <Button1Pressed>:
	uint8_t KEYCODE6;
} KeyboardHID;

KeyboardHID keyboardhid = { 0, 0, 0, 0, 0, 0, 0, 0 };

void Button1Pressed(void) {
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	keyboardhid.KEYCODE1 = 0x32;
 8000164:	4b07      	ldr	r3, [pc, #28]	; (8000184 <Button1Pressed+0x24>)
 8000166:	2232      	movs	r2, #50	; 0x32
 8000168:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid,
 800016a:	2208      	movs	r2, #8
 800016c:	4905      	ldr	r1, [pc, #20]	; (8000184 <Button1Pressed+0x24>)
 800016e:	4806      	ldr	r0, [pc, #24]	; (8000188 <Button1Pressed+0x28>)
 8000170:	f006 fd06 	bl	8006b80 <USBD_HID_SendReport>
			sizeof(keyboardhid));
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000174:	2201      	movs	r2, #1
 8000176:	2108      	movs	r1, #8
 8000178:	4804      	ldr	r0, [pc, #16]	; (800018c <Button1Pressed+0x2c>)
 800017a:	f001 fa40 	bl	80015fe <HAL_GPIO_WritePin>
	return;
 800017e:	bf00      	nop
}
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	200001ec 	.word	0x200001ec
 8000188:	20000374 	.word	0x20000374
 800018c:	40010800 	.word	0x40010800

08000190 <Button1Released>:

void Button1Released(void) {
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	keyboardhid.KEYCODE1 = 0x00;
 8000194:	4b07      	ldr	r3, [pc, #28]	; (80001b4 <Button1Released+0x24>)
 8000196:	2200      	movs	r2, #0
 8000198:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid,
 800019a:	2208      	movs	r2, #8
 800019c:	4905      	ldr	r1, [pc, #20]	; (80001b4 <Button1Released+0x24>)
 800019e:	4806      	ldr	r0, [pc, #24]	; (80001b8 <Button1Released+0x28>)
 80001a0:	f006 fcee 	bl	8006b80 <USBD_HID_SendReport>
			sizeof(keyboardhid));
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80001a4:	2200      	movs	r2, #0
 80001a6:	2108      	movs	r1, #8
 80001a8:	4804      	ldr	r0, [pc, #16]	; (80001bc <Button1Released+0x2c>)
 80001aa:	f001 fa28 	bl	80015fe <HAL_GPIO_WritePin>
	return;
 80001ae:	bf00      	nop
}
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	200001ec 	.word	0x200001ec
 80001b8:	20000374 	.word	0x20000374
 80001bc:	40010800 	.word	0x40010800

080001c0 <Button2Pressed>:

void Button2Pressed(void) {
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	keyboardhid.KEYCODE2 = 0x29;
 80001c4:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <Button2Pressed+0x24>)
 80001c6:	2229      	movs	r2, #41	; 0x29
 80001c8:	70da      	strb	r2, [r3, #3]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid,
 80001ca:	2208      	movs	r2, #8
 80001cc:	4905      	ldr	r1, [pc, #20]	; (80001e4 <Button2Pressed+0x24>)
 80001ce:	4806      	ldr	r0, [pc, #24]	; (80001e8 <Button2Pressed+0x28>)
 80001d0:	f006 fcd6 	bl	8006b80 <USBD_HID_SendReport>
			sizeof(keyboardhid));
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2108      	movs	r1, #8
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <Button2Pressed+0x2c>)
 80001da:	f001 fa10 	bl	80015fe <HAL_GPIO_WritePin>
	return;
 80001de:	bf00      	nop
}
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	200001ec 	.word	0x200001ec
 80001e8:	20000374 	.word	0x20000374
 80001ec:	40010800 	.word	0x40010800

080001f0 <Button2Released>:

void Button2Released(void) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	keyboardhid.KEYCODE2 = 0x00;
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <Button2Released+0x24>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	70da      	strb	r2, [r3, #3]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid,
 80001fa:	2208      	movs	r2, #8
 80001fc:	4905      	ldr	r1, [pc, #20]	; (8000214 <Button2Released+0x24>)
 80001fe:	4806      	ldr	r0, [pc, #24]	; (8000218 <Button2Released+0x28>)
 8000200:	f006 fcbe 	bl	8006b80 <USBD_HID_SendReport>
			sizeof(keyboardhid));
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000204:	2200      	movs	r2, #0
 8000206:	2108      	movs	r1, #8
 8000208:	4804      	ldr	r0, [pc, #16]	; (800021c <Button2Released+0x2c>)
 800020a:	f001 f9f8 	bl	80015fe <HAL_GPIO_WritePin>
	return;
 800020e:	bf00      	nop
}
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	200001ec 	.word	0x200001ec
 8000218:	20000374 	.word	0x20000374
 800021c:	40010800 	.word	0x40010800

08000220 <Button3Pressed>:

void Button3Pressed(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	keyboardhid.KEYCODE3 = 0x13;
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <Button3Pressed+0x24>)
 8000226:	2213      	movs	r2, #19
 8000228:	711a      	strb	r2, [r3, #4]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid,
 800022a:	2208      	movs	r2, #8
 800022c:	4905      	ldr	r1, [pc, #20]	; (8000244 <Button3Pressed+0x24>)
 800022e:	4806      	ldr	r0, [pc, #24]	; (8000248 <Button3Pressed+0x28>)
 8000230:	f006 fca6 	bl	8006b80 <USBD_HID_SendReport>
			sizeof(keyboardhid));
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000234:	2201      	movs	r2, #1
 8000236:	2108      	movs	r1, #8
 8000238:	4804      	ldr	r0, [pc, #16]	; (800024c <Button3Pressed+0x2c>)
 800023a:	f001 f9e0 	bl	80015fe <HAL_GPIO_WritePin>
	return;
 800023e:	bf00      	nop
}
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	200001ec 	.word	0x200001ec
 8000248:	20000374 	.word	0x20000374
 800024c:	40010800 	.word	0x40010800

08000250 <Button3Released>:

void Button3Released(void) {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	keyboardhid.KEYCODE3 = 0x00;
 8000254:	4b07      	ldr	r3, [pc, #28]	; (8000274 <Button3Released+0x24>)
 8000256:	2200      	movs	r2, #0
 8000258:	711a      	strb	r2, [r3, #4]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid,
 800025a:	2208      	movs	r2, #8
 800025c:	4905      	ldr	r1, [pc, #20]	; (8000274 <Button3Released+0x24>)
 800025e:	4806      	ldr	r0, [pc, #24]	; (8000278 <Button3Released+0x28>)
 8000260:	f006 fc8e 	bl	8006b80 <USBD_HID_SendReport>
			sizeof(keyboardhid));
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000264:	2200      	movs	r2, #0
 8000266:	2108      	movs	r1, #8
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <Button3Released+0x2c>)
 800026a:	f001 f9c8 	bl	80015fe <HAL_GPIO_WritePin>
	return;
 800026e:	bf00      	nop
}
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	200001ec 	.word	0x200001ec
 8000278:	20000374 	.word	0x20000374
 800027c:	40010800 	.word	0x40010800

08000280 <Button4Pressed>:

void Button4Pressed(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	keyboardhid.KEYCODE4 = 0x12;
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <Button4Pressed+0x24>)
 8000286:	2212      	movs	r2, #18
 8000288:	715a      	strb	r2, [r3, #5]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid,
 800028a:	2208      	movs	r2, #8
 800028c:	4905      	ldr	r1, [pc, #20]	; (80002a4 <Button4Pressed+0x24>)
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <Button4Pressed+0x28>)
 8000290:	f006 fc76 	bl	8006b80 <USBD_HID_SendReport>
			sizeof(keyboardhid));
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000294:	2201      	movs	r2, #1
 8000296:	2108      	movs	r1, #8
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <Button4Pressed+0x2c>)
 800029a:	f001 f9b0 	bl	80015fe <HAL_GPIO_WritePin>
	return;
 800029e:	bf00      	nop
}
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	200001ec 	.word	0x200001ec
 80002a8:	20000374 	.word	0x20000374
 80002ac:	40010800 	.word	0x40010800

080002b0 <Button4Released>:

void Button4Released(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	keyboardhid.KEYCODE4 = 0x00;
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <Button4Released+0x24>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	715a      	strb	r2, [r3, #5]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid,
 80002ba:	2208      	movs	r2, #8
 80002bc:	4905      	ldr	r1, [pc, #20]	; (80002d4 <Button4Released+0x24>)
 80002be:	4806      	ldr	r0, [pc, #24]	; (80002d8 <Button4Released+0x28>)
 80002c0:	f006 fc5e 	bl	8006b80 <USBD_HID_SendReport>
			sizeof(keyboardhid));
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2108      	movs	r1, #8
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <Button4Released+0x2c>)
 80002ca:	f001 f998 	bl	80015fe <HAL_GPIO_WritePin>
	return;
 80002ce:	bf00      	nop
}
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	200001ec 	.word	0x200001ec
 80002d8:	20000374 	.word	0x20000374
 80002dc:	40010800 	.word	0x40010800

080002e0 <Button5Pressed>:

void Button5Pressed(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	keyboardhid.KEYCODE5 = 0x06;
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <Button5Pressed+0x24>)
 80002e6:	2206      	movs	r2, #6
 80002e8:	719a      	strb	r2, [r3, #6]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid,
 80002ea:	2208      	movs	r2, #8
 80002ec:	4905      	ldr	r1, [pc, #20]	; (8000304 <Button5Pressed+0x24>)
 80002ee:	4806      	ldr	r0, [pc, #24]	; (8000308 <Button5Pressed+0x28>)
 80002f0:	f006 fc46 	bl	8006b80 <USBD_HID_SendReport>
			sizeof(keyboardhid));
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2108      	movs	r1, #8
 80002f8:	4804      	ldr	r0, [pc, #16]	; (800030c <Button5Pressed+0x2c>)
 80002fa:	f001 f980 	bl	80015fe <HAL_GPIO_WritePin>
	return;
 80002fe:	bf00      	nop
}
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	200001ec 	.word	0x200001ec
 8000308:	20000374 	.word	0x20000374
 800030c:	40010800 	.word	0x40010800

08000310 <Button5Released>:

void Button5Released(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	keyboardhid.KEYCODE5 = 0x00;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <Button5Released+0x24>)
 8000316:	2200      	movs	r2, #0
 8000318:	719a      	strb	r2, [r3, #6]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid,
 800031a:	2208      	movs	r2, #8
 800031c:	4905      	ldr	r1, [pc, #20]	; (8000334 <Button5Released+0x24>)
 800031e:	4806      	ldr	r0, [pc, #24]	; (8000338 <Button5Released+0x28>)
 8000320:	f006 fc2e 	bl	8006b80 <USBD_HID_SendReport>
			sizeof(keyboardhid));
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000324:	2200      	movs	r2, #0
 8000326:	2108      	movs	r1, #8
 8000328:	4804      	ldr	r0, [pc, #16]	; (800033c <Button5Released+0x2c>)
 800032a:	f001 f968 	bl	80015fe <HAL_GPIO_WritePin>
	return;
 800032e:	bf00      	nop
}
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	200001ec 	.word	0x200001ec
 8000338:	20000374 	.word	0x20000374
 800033c:	40010800 	.word	0x40010800

08000340 <Buttons_Check>:

}

};

void Buttons_Check() {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0

for (int i = 0; i<5; i++) {
 8000346:	2300      	movs	r3, #0
 8000348:	607b      	str	r3, [r7, #4]
 800034a:	e092      	b.n	8000472 <Buttons_Check+0x132>
	struct Button* b=&buttons[i];
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	4613      	mov	r3, r2
 8000350:	005b      	lsls	r3, r3, #1
 8000352:	4413      	add	r3, r2
 8000354:	00db      	lsls	r3, r3, #3
 8000356:	4a4b      	ldr	r2, [pc, #300]	; (8000484 <Buttons_Check+0x144>)
 8000358:	4413      	add	r3, r2
 800035a:	603b      	str	r3, [r7, #0]

	switch (b->state) {
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	7d1b      	ldrb	r3, [r3, #20]
 8000360:	2b03      	cmp	r3, #3
 8000362:	d87b      	bhi.n	800045c <Buttons_Check+0x11c>
 8000364:	a201      	add	r2, pc, #4	; (adr r2, 800036c <Buttons_Check+0x2c>)
 8000366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036a:	bf00      	nop
 800036c:	0800037d 	.word	0x0800037d
 8000370:	080003ed 	.word	0x080003ed
 8000374:	080003a7 	.word	0x080003a7
 8000378:	08000417 	.word	0x08000417
		case Idle:
		if (HAL_GPIO_ReadPin(b->port, b->pin)) {
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	b29b      	uxth	r3, r3
 8000386:	4619      	mov	r1, r3
 8000388:	4610      	mov	r0, r2
 800038a:	f001 f921 	bl	80015d0 <HAL_GPIO_ReadPin>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d064      	beq.n	800045e <Buttons_Check+0x11e>

			b->state = DebouncePressed;
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	2202      	movs	r2, #2
 8000398:	751a      	strb	r2, [r3, #20]
			b->releaseTick = HAL_GetTick();
 800039a:	f000 fc8f 	bl	8000cbc <HAL_GetTick>
 800039e:	4602      	mov	r2, r0
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	611a      	str	r2, [r3, #16]

		}
		break;
 80003a4:	e05b      	b.n	800045e <Buttons_Check+0x11e>

		case DebouncePressed:
		if (HAL_GPIO_ReadPin(b->port, b->pin)) {
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	4619      	mov	r1, r3
 80003b2:	4610      	mov	r0, r2
 80003b4:	f001 f90c 	bl	80015d0 <HAL_GPIO_ReadPin>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d012      	beq.n	80003e4 <Buttons_Check+0xa4>
			if (HAL_GetTick() - b->releaseTick >= 10) {
 80003be:	f000 fc7d 	bl	8000cbc <HAL_GetTick>
 80003c2:	4602      	mov	r2, r0
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	1ad3      	subs	r3, r2, r3
 80003ca:	2b09      	cmp	r3, #9
 80003cc:	d949      	bls.n	8000462 <Buttons_Check+0x122>

				b->state = Pressed;
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	2201      	movs	r2, #1
 80003d2:	751a      	strb	r2, [r3, #20]
				if (b->pressedAction != NULL) {
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d042      	beq.n	8000462 <Buttons_Check+0x122>
					b->pressedAction();
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	4798      	blx	r3
				}
			}
		} else
		b->state = Idle;
		break;
 80003e2:	e03e      	b.n	8000462 <Buttons_Check+0x122>
		b->state = Idle;
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	2200      	movs	r2, #0
 80003e8:	751a      	strb	r2, [r3, #20]
		break;
 80003ea:	e03a      	b.n	8000462 <Buttons_Check+0x122>

		case Pressed:

		if (!HAL_GPIO_ReadPin(b->port, b->pin)) {
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	4619      	mov	r1, r3
 80003f8:	4610      	mov	r0, r2
 80003fa:	f001 f8e9 	bl	80015d0 <HAL_GPIO_ReadPin>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d130      	bne.n	8000466 <Buttons_Check+0x126>

			b->state = DebounceDepressed;
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	2203      	movs	r2, #3
 8000408:	751a      	strb	r2, [r3, #20]
			b->releaseTick = HAL_GetTick();
 800040a:	f000 fc57 	bl	8000cbc <HAL_GetTick>
 800040e:	4602      	mov	r2, r0
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	611a      	str	r2, [r3, #16]

		}
		break;
 8000414:	e027      	b.n	8000466 <Buttons_Check+0x126>

		case DebounceDepressed:
		if (!HAL_GPIO_ReadPin(b->port, b->pin)) {
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	b29b      	uxth	r3, r3
 8000420:	4619      	mov	r1, r3
 8000422:	4610      	mov	r0, r2
 8000424:	f001 f8d4 	bl	80015d0 <HAL_GPIO_ReadPin>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d112      	bne.n	8000454 <Buttons_Check+0x114>
			if (HAL_GetTick() - b->releaseTick >= 10) {
 800042e:	f000 fc45 	bl	8000cbc <HAL_GetTick>
 8000432:	4602      	mov	r2, r0
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	691b      	ldr	r3, [r3, #16]
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	2b09      	cmp	r3, #9
 800043c:	d915      	bls.n	800046a <Buttons_Check+0x12a>

				b->state = Idle;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	2200      	movs	r2, #0
 8000442:	751a      	strb	r2, [r3, #20]
				if (b->releaseAction != NULL) {
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d00e      	beq.n	800046a <Buttons_Check+0x12a>
					b->releaseAction();
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	4798      	blx	r3
				}
			}
		} else
		b->state = Pressed;
		break;
 8000452:	e00a      	b.n	800046a <Buttons_Check+0x12a>
		b->state = Pressed;
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	2201      	movs	r2, #1
 8000458:	751a      	strb	r2, [r3, #20]
		break;
 800045a:	e006      	b.n	800046a <Buttons_Check+0x12a>

		default:

		while (1) {
 800045c:	e7fe      	b.n	800045c <Buttons_Check+0x11c>
		break;
 800045e:	bf00      	nop
 8000460:	e004      	b.n	800046c <Buttons_Check+0x12c>
		break;
 8000462:	bf00      	nop
 8000464:	e002      	b.n	800046c <Buttons_Check+0x12c>
		break;
 8000466:	bf00      	nop
 8000468:	e000      	b.n	800046c <Buttons_Check+0x12c>
		break;
 800046a:	bf00      	nop
for (int i = 0; i<5; i++) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3301      	adds	r3, #1
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2b04      	cmp	r3, #4
 8000476:	f77f af69 	ble.w	800034c <Buttons_Check+0xc>
		}

		break;
	}
}
}
 800047a:	bf00      	nop
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000000 	.word	0x20000000

08000488 <create_px_stream>:
Pixel tempMatrix[DISP_HEIGHT][2*DISP_WIDTH];
Pixel blank = {0,0,0};
uint8_t control = 0;
uint8_t animation_number = 0;

void create_px_stream(Pixel *px, uint8_t *outputbuf) {
 8000488:	b480      	push	{r7}
 800048a:	b087      	sub	sp, #28
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
	for (size_t i = 0; i < COLOR_SIZE; i++) {
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
 8000496:	e019      	b.n	80004cc <create_px_stream+0x44>
		if (px->green & (1 << (7 - i)))
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	785b      	ldrb	r3, [r3, #1]
 800049c:	461a      	mov	r2, r3
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	f1c3 0307 	rsb	r3, r3, #7
 80004a4:	fa42 f303 	asr.w	r3, r2, r3
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d005      	beq.n	80004bc <create_px_stream+0x34>
			outputbuf[i] = one;
 80004b0:	683a      	ldr	r2, [r7, #0]
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	4413      	add	r3, r2
 80004b6:	2207      	movs	r2, #7
 80004b8:	701a      	strb	r2, [r3, #0]
 80004ba:	e004      	b.n	80004c6 <create_px_stream+0x3e>
		else
			outputbuf[i] = zero;
 80004bc:	683a      	ldr	r2, [r7, #0]
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	4413      	add	r3, r2
 80004c2:	221f      	movs	r2, #31
 80004c4:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < COLOR_SIZE; i++) {
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	3301      	adds	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	2b07      	cmp	r3, #7
 80004d0:	d9e2      	bls.n	8000498 <create_px_stream+0x10>
	}
	outputbuf = &outputbuf[COLOR_SIZE];
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	3308      	adds	r3, #8
 80004d6:	603b      	str	r3, [r7, #0]

	for (size_t i = 0; i < COLOR_SIZE; i++) {
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	e019      	b.n	8000512 <create_px_stream+0x8a>
		if (px->red & (1 << (7 - i)))
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	461a      	mov	r2, r3
 80004e4:	693b      	ldr	r3, [r7, #16]
 80004e6:	f1c3 0307 	rsb	r3, r3, #7
 80004ea:	fa42 f303 	asr.w	r3, r2, r3
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d005      	beq.n	8000502 <create_px_stream+0x7a>
			outputbuf[i] = one;
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	693b      	ldr	r3, [r7, #16]
 80004fa:	4413      	add	r3, r2
 80004fc:	2207      	movs	r2, #7
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	e004      	b.n	800050c <create_px_stream+0x84>
		else
			outputbuf[i] = zero;
 8000502:	683a      	ldr	r2, [r7, #0]
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	4413      	add	r3, r2
 8000508:	221f      	movs	r2, #31
 800050a:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < COLOR_SIZE; i++) {
 800050c:	693b      	ldr	r3, [r7, #16]
 800050e:	3301      	adds	r3, #1
 8000510:	613b      	str	r3, [r7, #16]
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	2b07      	cmp	r3, #7
 8000516:	d9e2      	bls.n	80004de <create_px_stream+0x56>
	}
	outputbuf = &outputbuf[COLOR_SIZE];
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	3308      	adds	r3, #8
 800051c:	603b      	str	r3, [r7, #0]

	for (size_t i = 0; i < COLOR_SIZE; i++) {
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	e019      	b.n	8000558 <create_px_stream+0xd0>
		if (px->blue & (1 << (7 - i)))
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	789b      	ldrb	r3, [r3, #2]
 8000528:	461a      	mov	r2, r3
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	f1c3 0307 	rsb	r3, r3, #7
 8000530:	fa42 f303 	asr.w	r3, r2, r3
 8000534:	f003 0301 	and.w	r3, r3, #1
 8000538:	2b00      	cmp	r3, #0
 800053a:	d005      	beq.n	8000548 <create_px_stream+0xc0>
			outputbuf[i] = one;
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4413      	add	r3, r2
 8000542:	2207      	movs	r2, #7
 8000544:	701a      	strb	r2, [r3, #0]
 8000546:	e004      	b.n	8000552 <create_px_stream+0xca>
		else
			outputbuf[i] = zero;
 8000548:	683a      	ldr	r2, [r7, #0]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	221f      	movs	r2, #31
 8000550:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < COLOR_SIZE; i++) {
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3301      	adds	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2b07      	cmp	r3, #7
 800055c:	d9e2      	bls.n	8000524 <create_px_stream+0x9c>
	}
}
 800055e:	bf00      	nop
 8000560:	bf00      	nop
 8000562:	371c      	adds	r7, #28
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <create_preambule_stream>:


void create_preambule_stream(uint8_t *outputbuf){
 800056a:	b480      	push	{r7}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
	for(size_t i = 0; i < PAYLOAD_BYTES; i++){
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	e007      	b.n	8000588 <create_preambule_stream+0x1e>
		outputbuf[i] = reset;
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	4413      	add	r3, r2
 800057e:	22ff      	movs	r2, #255	; 0xff
 8000580:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < PAYLOAD_BYTES; i++){
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	3301      	adds	r3, #1
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2b27      	cmp	r3, #39	; 0x27
 800058c:	d9f4      	bls.n	8000578 <create_preambule_stream+0xe>
	}
}
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <create_matrix_stream>:

void create_matrix_stream(Pixel* px, uint8_t *outputbuf, uint8_t pixelcount){
 800059a:	b580      	push	{r7, lr}
 800059c:	b086      	sub	sp, #24
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	4613      	mov	r3, r2
 80005a6:	71fb      	strb	r3, [r7, #7]
	create_preambule_stream(outputbuf);
 80005a8:	68b8      	ldr	r0, [r7, #8]
 80005aa:	f7ff ffde 	bl	800056a <create_preambule_stream>
	uint8_t* payload = &outputbuf[PAYLOAD_BYTES];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	3328      	adds	r3, #40	; 0x28
 80005b2:	613b      	str	r3, [r7, #16]
	for(size_t i = 0; i < pixelcount; i++){
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	e013      	b.n	80005e2 <create_matrix_stream+0x48>
		create_px_stream(&px[i], &(payload[i*sizeof(Pixel)*SPI_WORD_LEN]));
 80005ba:	697a      	ldr	r2, [r7, #20]
 80005bc:	4613      	mov	r3, r2
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	4413      	add	r3, r2
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	18d0      	adds	r0, r2, r3
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	4613      	mov	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4413      	add	r3, r2
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	461a      	mov	r2, r3
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	4413      	add	r3, r2
 80005d6:	4619      	mov	r1, r3
 80005d8:	f7ff ff56 	bl	8000488 <create_px_stream>
	for(size_t i = 0; i < pixelcount; i++){
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	3301      	adds	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d3e7      	bcc.n	80005ba <create_matrix_stream+0x20>
	}
}
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <send_data_to_stoplight>:

void send_data_to_stoplight(){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	create_matrix_stream(px, matrix_buffor, NUM_OF_PIXELS);
 80005f8:	2204      	movs	r2, #4
 80005fa:	4905      	ldr	r1, [pc, #20]	; (8000610 <send_data_to_stoplight+0x1c>)
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <send_data_to_stoplight+0x20>)
 80005fe:	f7ff ffcc 	bl	800059a <create_matrix_stream>
	HAL_SPI_Transmit_DMA(&hspi1, matrix_buffor, sizeof(matrix_buffor));
 8000602:	2288      	movs	r2, #136	; 0x88
 8000604:	4902      	ldr	r1, [pc, #8]	; (8000610 <send_data_to_stoplight+0x1c>)
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <send_data_to_stoplight+0x24>)
 8000608:	f003 fa82 	bl	8003b10 <HAL_SPI_Transmit_DMA>
//	HAL_SPI_Transmit_DMA(&hspi1, tab, sizeof(tab));
//	status =  HAL_SPI_Transmit(&hspi1, tab, sizeof(tab), 1000);
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200001f4 	.word	0x200001f4
 8000614:	2000027c 	.word	0x2000027c
 8000618:	20000288 	.word	0x20000288

0800061c <display_init>:
	}
	send_data_to_stoplight();
}


void display_init(){
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
	for(size_t i = 0; i < NUM_OF_PIXELS; i++){
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	e01c      	b.n	8000662 <display_init+0x46>
		px[i].red = 162;
 8000628:	4912      	ldr	r1, [pc, #72]	; (8000674 <display_init+0x58>)
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	440b      	add	r3, r1
 8000634:	22a2      	movs	r2, #162	; 0xa2
 8000636:	701a      	strb	r2, [r3, #0]
		px[i].blue = 255;
 8000638:	490e      	ldr	r1, [pc, #56]	; (8000674 <display_init+0x58>)
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	440b      	add	r3, r1
 8000644:	3302      	adds	r3, #2
 8000646:	22ff      	movs	r2, #255	; 0xff
 8000648:	701a      	strb	r2, [r3, #0]
		px[i].green= 100;
 800064a:	490a      	ldr	r1, [pc, #40]	; (8000674 <display_init+0x58>)
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	4613      	mov	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	4413      	add	r3, r2
 8000654:	440b      	add	r3, r1
 8000656:	3301      	adds	r3, #1
 8000658:	2264      	movs	r2, #100	; 0x64
 800065a:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < NUM_OF_PIXELS; i++){
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b03      	cmp	r3, #3
 8000666:	d9df      	bls.n	8000628 <display_init+0xc>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	2000027c 	.word	0x2000027c

08000678 <LED_Update>:

void LED_Update(){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	send_data_to_stoplight();
 800067c:	f7ff ffba 	bl	80005f4 <send_data_to_stoplight>
//	HAL_Delay(1000);

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_DMA_Init+0x38>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <MX_DMA_Init+0x38>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6153      	str	r3, [r2, #20]
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_DMA_Init+0x38>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	200d      	movs	r0, #13
 80006a8:	f000 fbe9 	bl	8000e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80006ac:	200d      	movs	r0, #13
 80006ae:	f000 fc02 	bl	8000eb6 <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d4:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a2a      	ldr	r2, [pc, #168]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0320 	and.w	r3, r3, #32
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a24      	ldr	r2, [pc, #144]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_GPIO_Init+0xc4>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a1e      	ldr	r2, [pc, #120]	; (8000784 <MX_GPIO_Init+0xc4>)
 800070a:	f043 0308 	orr.w	r3, r3, #8
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0308 	and.w	r3, r3, #8
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|USB_PLUP_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8000722:	4819      	ldr	r0, [pc, #100]	; (8000788 <MX_GPIO_Init+0xc8>)
 8000724:	f000 ff6b 	bl	80015fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|USB_PLUP_Pin;
 8000728:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800072c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2302      	movs	r3, #2
 8000738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	4619      	mov	r1, r3
 8000740:	4811      	ldr	r0, [pc, #68]	; (8000788 <MX_GPIO_Init+0xc8>)
 8000742:	f000 fdc1 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin|KEY4_Pin|KEY3_Pin;
 8000746:	f640 4306 	movw	r3, #3078	; 0xc06
 800074a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	480c      	ldr	r0, [pc, #48]	; (800078c <MX_GPIO_Init+0xcc>)
 800075c:	f000 fdb4 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_SW_Pin;
 8000760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_SW_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4619      	mov	r1, r3
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_GPIO_Init+0xc8>)
 8000776:	f000 fda7 	bl	80012c8 <HAL_GPIO_Init>

}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	40010800 	.word	0x40010800
 800078c:	40010c00 	.word	0x40010c00

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000794:	f000 fa3a 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000798:	f000 f80d 	bl	80007b6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079c:	f7ff ff90 	bl	80006c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007a0:	f7ff ff70 	bl	8000684 <MX_DMA_Init>
  MX_SPI1_Init();
 80007a4:	f000 f868 	bl	8000878 <MX_SPI1_Init>
  MX_TIM2_Init();
 80007a8:	f000 f97a 	bl	8000aa0 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80007ac:	f007 fad8 	bl	8007d60 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 80007b0:	f7ff fccc 	bl	800014c <App_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <main+0x24>

080007b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b094      	sub	sp, #80	; 0x50
 80007ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c0:	2228      	movs	r2, #40	; 0x28
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f007 fe85 	bl	80084d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e6:	2301      	movs	r3, #1
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ea:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000800:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000802:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000806:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080c:	4618      	mov	r0, r3
 800080e:	f002 fc65 	bl	80030dc <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000818:	f000 f828 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000820:	2302      	movs	r3, #2
 8000822:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2101      	movs	r1, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fed1 	bl	80035e0 <HAL_RCC_ClockConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000844:	f000 f812 	bl	800086c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000848:	2310      	movs	r3, #16
 800084a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800084c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000850:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4618      	mov	r0, r3
 8000856:	f003 f821 	bl	800389c <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000860:	f000 f804 	bl	800086c <Error_Handler>
  }
}
 8000864:	bf00      	nop
 8000866:	3750      	adds	r7, #80	; 0x50
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_SPI1_Init+0x64>)
 800087e:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <MX_SPI1_Init+0x68>)
 8000880:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_SPI1_Init+0x64>)
 8000884:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000888:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_SPI1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_SPI1_Init+0x64>)
 80008a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_SPI1_Init+0x64>)
 80008ac:	2210      	movs	r2, #16
 80008ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_SPI1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_SPI1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_SPI1_Init+0x64>)
 80008c4:	220a      	movs	r2, #10
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_SPI1_Init+0x64>)
 80008ca:	f003 f89d 	bl	8003a08 <HAL_SPI_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008d4:	f7ff ffca 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000288 	.word	0x20000288
 80008e0:	40013000 	.word	0x40013000

080008e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a29      	ldr	r2, [pc, #164]	; (80009a4 <HAL_SPI_MspInit+0xc0>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d14a      	bne.n	800099a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000904:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <HAL_SPI_MspInit+0xc4>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a27      	ldr	r2, [pc, #156]	; (80009a8 <HAL_SPI_MspInit+0xc4>)
 800090a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <HAL_SPI_MspInit+0xc4>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <HAL_SPI_MspInit+0xc4>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <HAL_SPI_MspInit+0xc4>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <HAL_SPI_MspInit+0xc4>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0304 	and.w	r3, r3, #4
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000934:	23a0      	movs	r3, #160	; 0xa0
 8000936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4619      	mov	r1, r3
 8000946:	4819      	ldr	r0, [pc, #100]	; (80009ac <HAL_SPI_MspInit+0xc8>)
 8000948:	f000 fcbe 	bl	80012c8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <HAL_SPI_MspInit+0xcc>)
 800094e:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <HAL_SPI_MspInit+0xd0>)
 8000950:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <HAL_SPI_MspInit+0xcc>)
 8000954:	2210      	movs	r2, #16
 8000956:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_SPI_MspInit+0xcc>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <HAL_SPI_MspInit+0xcc>)
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_SPI_MspInit+0xcc>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_SPI_MspInit+0xcc>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_SPI_MspInit+0xcc>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_SPI_MspInit+0xcc>)
 8000978:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800097c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <HAL_SPI_MspInit+0xcc>)
 8000980:	f000 fab4 	bl	8000eec <HAL_DMA_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 800098a:	f7ff ff6f 	bl	800086c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_SPI_MspInit+0xcc>)
 8000992:	649a      	str	r2, [r3, #72]	; 0x48
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_SPI_MspInit+0xcc>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40013000 	.word	0x40013000
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800
 80009b0:	200002e0 	.word	0x200002e0
 80009b4:	40020030 	.word	0x40020030

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_MspInit+0x5c>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <HAL_MspInit+0x5c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6193      	str	r3, [r2, #24]
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_MspInit+0x5c>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x5c>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_MspInit+0x5c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	61d3      	str	r3, [r2, #28]
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_MspInit+0x5c>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_MspInit+0x60>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_MspInit+0x60>)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010000 	.word	0x40010000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a62:	f000 f919 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <DMA1_Channel3_IRQHandler+0x10>)
 8000a72:	f000 faf5 	bl	8001060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200002e0 	.word	0x200002e0

08000a80 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a86:	f000 fef7 	bl	8001878 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000838 	.word	0x20000838

08000a94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	2224      	movs	r2, #36	; 0x24
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f007 fd10 	bl	80084d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_TIM2_Init+0xa4>)
 8000abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_TIM2_Init+0xa4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_TIM2_Init+0xa4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_TIM2_Init+0xa4>)
 8000ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_TIM2_Init+0xa4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_TIM2_Init+0xa4>)
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aec:	2301      	movs	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000af4:	230a      	movs	r3, #10
 8000af6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000afc:	2301      	movs	r3, #1
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <MX_TIM2_Init+0xa4>)
 8000b10:	f003 f9f2 	bl	8003ef8 <HAL_TIM_Encoder_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000b1a:	f7ff fea7 	bl	800086c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <MX_TIM2_Init+0xa4>)
 8000b2c:	f003 fae8 	bl	8004100 <HAL_TIMEx_MasterConfigSynchronization>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b36:	f7ff fe99 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	3730      	adds	r7, #48	; 0x30
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000324 	.word	0x20000324

08000b48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b66:	d123      	bne.n	8000bb0 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b6a:	69db      	ldr	r3, [r3, #28]
 8000b6c:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	61d3      	str	r3, [r2, #28]
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b76:	69db      	ldr	r3, [r3, #28]
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a0c      	ldr	r2, [pc, #48]	; (8000bb8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4804      	ldr	r0, [pc, #16]	; (8000bbc <HAL_TIM_Encoder_MspInit+0x74>)
 8000bac:	f000 fb8c 	bl	80012c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010800 	.word	0x40010800

08000bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc0:	f7ff ff68 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bc6:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bdc:	4c09      	ldr	r4, [pc, #36]	; (8000c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bea:	f007 fc7b 	bl	80084e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bee:	f7ff fdcf 	bl	8000790 <main>
  bx lr
 8000bf2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000bfc:	080085b8 	.word	0x080085b8
  ldr r2, =_sbss
 8000c00:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000c04:	20000b3c 	.word	0x20000b3c

08000c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_2_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x28>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x28>)
 8000c16:	f043 0310 	orr.w	r3, r3, #16
 8000c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f923 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	200f      	movs	r0, #15
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fec6 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40022000 	.word	0x40022000

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f93b 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f903 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000078 	.word	0x20000078
 8000c90:	20000080 	.word	0x20000080
 8000c94:	2000007c 	.word	0x2000007c

08000c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <HAL_IncTick+0x1c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_IncTick+0x20>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a03      	ldr	r2, [pc, #12]	; (8000cb8 <HAL_IncTick+0x20>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000080 	.word	0x20000080
 8000cb8:	2000036c 	.word	0x2000036c

08000cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <HAL_GetTick+0x10>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	2000036c 	.word	0x2000036c

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4906      	ldr	r1, [pc, #24]	; (8000d68 <__NVIC_EnableIRQ+0x34>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff90 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff2d 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff42 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff90 	bl	8000dc0 <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5f 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff35 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffa2 	bl	8000e24 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e043      	b.n	8000f8a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <HAL_DMA_Init+0xa8>)
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <HAL_DMA_Init+0xac>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	009a      	lsls	r2, r3, #2
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <HAL_DMA_Init+0xb0>)
 8000f1e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2202      	movs	r2, #2
 8000f24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	bffdfff8 	.word	0xbffdfff8
 8000f98:	cccccccd 	.word	0xcccccccd
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <HAL_DMA_Start_IT+0x20>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e04b      	b.n	8001058 <HAL_DMA_Start_IT+0xb8>
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d13a      	bne.n	800104a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0201 	bic.w	r2, r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	68b9      	ldr	r1, [r7, #8]
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f000 f937 	bl	800126c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001002:	2b00      	cmp	r3, #0
 8001004:	d008      	beq.n	8001018 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 020e 	orr.w	r2, r2, #14
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	e00f      	b.n	8001038 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0204 	bic.w	r2, r2, #4
 8001026:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f042 020a 	orr.w	r2, r2, #10
 8001036:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 0201 	orr.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	e005      	b.n	8001056 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001052:	2302      	movs	r3, #2
 8001054:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001056:	7dfb      	ldrb	r3, [r7, #23]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	2204      	movs	r2, #4
 800107e:	409a      	lsls	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4013      	ands	r3, r2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d04f      	beq.n	8001128 <HAL_DMA_IRQHandler+0xc8>
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	2b00      	cmp	r3, #0
 8001090:	d04a      	beq.n	8001128 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0320 	and.w	r3, r3, #32
 800109c:	2b00      	cmp	r3, #0
 800109e:	d107      	bne.n	80010b0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0204 	bic.w	r2, r2, #4
 80010ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a66      	ldr	r2, [pc, #408]	; (8001250 <HAL_DMA_IRQHandler+0x1f0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d029      	beq.n	800110e <HAL_DMA_IRQHandler+0xae>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a65      	ldr	r2, [pc, #404]	; (8001254 <HAL_DMA_IRQHandler+0x1f4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d022      	beq.n	800110a <HAL_DMA_IRQHandler+0xaa>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a63      	ldr	r2, [pc, #396]	; (8001258 <HAL_DMA_IRQHandler+0x1f8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01a      	beq.n	8001104 <HAL_DMA_IRQHandler+0xa4>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a62      	ldr	r2, [pc, #392]	; (800125c <HAL_DMA_IRQHandler+0x1fc>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d012      	beq.n	80010fe <HAL_DMA_IRQHandler+0x9e>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a60      	ldr	r2, [pc, #384]	; (8001260 <HAL_DMA_IRQHandler+0x200>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00a      	beq.n	80010f8 <HAL_DMA_IRQHandler+0x98>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a5f      	ldr	r2, [pc, #380]	; (8001264 <HAL_DMA_IRQHandler+0x204>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d102      	bne.n	80010f2 <HAL_DMA_IRQHandler+0x92>
 80010ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010f0:	e00e      	b.n	8001110 <HAL_DMA_IRQHandler+0xb0>
 80010f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010f6:	e00b      	b.n	8001110 <HAL_DMA_IRQHandler+0xb0>
 80010f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010fc:	e008      	b.n	8001110 <HAL_DMA_IRQHandler+0xb0>
 80010fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001102:	e005      	b.n	8001110 <HAL_DMA_IRQHandler+0xb0>
 8001104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001108:	e002      	b.n	8001110 <HAL_DMA_IRQHandler+0xb0>
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	e000      	b.n	8001110 <HAL_DMA_IRQHandler+0xb0>
 800110e:	2304      	movs	r3, #4
 8001110:	4a55      	ldr	r2, [pc, #340]	; (8001268 <HAL_DMA_IRQHandler+0x208>)
 8001112:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 8094 	beq.w	8001246 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001126:	e08e      	b.n	8001246 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	2202      	movs	r2, #2
 800112e:	409a      	lsls	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4013      	ands	r3, r2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d056      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x186>
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d051      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0320 	and.w	r3, r3, #32
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10b      	bne.n	8001168 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 020a 	bic.w	r2, r2, #10
 800115e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a38      	ldr	r2, [pc, #224]	; (8001250 <HAL_DMA_IRQHandler+0x1f0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d029      	beq.n	80011c6 <HAL_DMA_IRQHandler+0x166>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a37      	ldr	r2, [pc, #220]	; (8001254 <HAL_DMA_IRQHandler+0x1f4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d022      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x162>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a35      	ldr	r2, [pc, #212]	; (8001258 <HAL_DMA_IRQHandler+0x1f8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d01a      	beq.n	80011bc <HAL_DMA_IRQHandler+0x15c>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a34      	ldr	r2, [pc, #208]	; (800125c <HAL_DMA_IRQHandler+0x1fc>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d012      	beq.n	80011b6 <HAL_DMA_IRQHandler+0x156>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a32      	ldr	r2, [pc, #200]	; (8001260 <HAL_DMA_IRQHandler+0x200>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00a      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x150>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a31      	ldr	r2, [pc, #196]	; (8001264 <HAL_DMA_IRQHandler+0x204>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d102      	bne.n	80011aa <HAL_DMA_IRQHandler+0x14a>
 80011a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011a8:	e00e      	b.n	80011c8 <HAL_DMA_IRQHandler+0x168>
 80011aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011ae:	e00b      	b.n	80011c8 <HAL_DMA_IRQHandler+0x168>
 80011b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b4:	e008      	b.n	80011c8 <HAL_DMA_IRQHandler+0x168>
 80011b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ba:	e005      	b.n	80011c8 <HAL_DMA_IRQHandler+0x168>
 80011bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c0:	e002      	b.n	80011c8 <HAL_DMA_IRQHandler+0x168>
 80011c2:	2320      	movs	r3, #32
 80011c4:	e000      	b.n	80011c8 <HAL_DMA_IRQHandler+0x168>
 80011c6:	2302      	movs	r3, #2
 80011c8:	4a27      	ldr	r2, [pc, #156]	; (8001268 <HAL_DMA_IRQHandler+0x208>)
 80011ca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d034      	beq.n	8001246 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011e4:	e02f      	b.n	8001246 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	2208      	movs	r2, #8
 80011ec:	409a      	lsls	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d028      	beq.n	8001248 <HAL_DMA_IRQHandler+0x1e8>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d023      	beq.n	8001248 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 020e 	bic.w	r2, r2, #14
 800120e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001218:	2101      	movs	r1, #1
 800121a:	fa01 f202 	lsl.w	r2, r1, r2
 800121e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	2b00      	cmp	r3, #0
 800123c:	d004      	beq.n	8001248 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	4798      	blx	r3
    }
  }
  return;
 8001246:	bf00      	nop
 8001248:	bf00      	nop
}
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40020008 	.word	0x40020008
 8001254:	4002001c 	.word	0x4002001c
 8001258:	40020030 	.word	0x40020030
 800125c:	40020044 	.word	0x40020044
 8001260:	40020058 	.word	0x40020058
 8001264:	4002006c 	.word	0x4002006c
 8001268:	40020000 	.word	0x40020000

0800126c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001282:	2101      	movs	r1, #1
 8001284:	fa01 f202 	lsl.w	r2, r1, r2
 8001288:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b10      	cmp	r3, #16
 8001298:	d108      	bne.n	80012ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012aa:	e007      	b.n	80012bc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	60da      	str	r2, [r3, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b08b      	sub	sp, #44	; 0x2c
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012da:	e169      	b.n	80015b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012dc:	2201      	movs	r2, #1
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f040 8158 	bne.w	80015aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4a9a      	ldr	r2, [pc, #616]	; (8001568 <HAL_GPIO_Init+0x2a0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d05e      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001304:	4a98      	ldr	r2, [pc, #608]	; (8001568 <HAL_GPIO_Init+0x2a0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d875      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800130a:	4a98      	ldr	r2, [pc, #608]	; (800156c <HAL_GPIO_Init+0x2a4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d058      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001310:	4a96      	ldr	r2, [pc, #600]	; (800156c <HAL_GPIO_Init+0x2a4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d86f      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001316:	4a96      	ldr	r2, [pc, #600]	; (8001570 <HAL_GPIO_Init+0x2a8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d052      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 800131c:	4a94      	ldr	r2, [pc, #592]	; (8001570 <HAL_GPIO_Init+0x2a8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d869      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001322:	4a94      	ldr	r2, [pc, #592]	; (8001574 <HAL_GPIO_Init+0x2ac>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d04c      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001328:	4a92      	ldr	r2, [pc, #584]	; (8001574 <HAL_GPIO_Init+0x2ac>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d863      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800132e:	4a92      	ldr	r2, [pc, #584]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d046      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
 8001334:	4a90      	ldr	r2, [pc, #576]	; (8001578 <HAL_GPIO_Init+0x2b0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d85d      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 800133a:	2b12      	cmp	r3, #18
 800133c:	d82a      	bhi.n	8001394 <HAL_GPIO_Init+0xcc>
 800133e:	2b12      	cmp	r3, #18
 8001340:	d859      	bhi.n	80013f6 <HAL_GPIO_Init+0x12e>
 8001342:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <HAL_GPIO_Init+0x80>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	080013c3 	.word	0x080013c3
 800134c:	0800139d 	.word	0x0800139d
 8001350:	080013af 	.word	0x080013af
 8001354:	080013f1 	.word	0x080013f1
 8001358:	080013f7 	.word	0x080013f7
 800135c:	080013f7 	.word	0x080013f7
 8001360:	080013f7 	.word	0x080013f7
 8001364:	080013f7 	.word	0x080013f7
 8001368:	080013f7 	.word	0x080013f7
 800136c:	080013f7 	.word	0x080013f7
 8001370:	080013f7 	.word	0x080013f7
 8001374:	080013f7 	.word	0x080013f7
 8001378:	080013f7 	.word	0x080013f7
 800137c:	080013f7 	.word	0x080013f7
 8001380:	080013f7 	.word	0x080013f7
 8001384:	080013f7 	.word	0x080013f7
 8001388:	080013f7 	.word	0x080013f7
 800138c:	080013a5 	.word	0x080013a5
 8001390:	080013b9 	.word	0x080013b9
 8001394:	4a79      	ldr	r2, [pc, #484]	; (800157c <HAL_GPIO_Init+0x2b4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800139a:	e02c      	b.n	80013f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	623b      	str	r3, [r7, #32]
          break;
 80013a2:	e029      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	3304      	adds	r3, #4
 80013aa:	623b      	str	r3, [r7, #32]
          break;
 80013ac:	e024      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	3308      	adds	r3, #8
 80013b4:	623b      	str	r3, [r7, #32]
          break;
 80013b6:	e01f      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	330c      	adds	r3, #12
 80013be:	623b      	str	r3, [r7, #32]
          break;
 80013c0:	e01a      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ca:	2304      	movs	r3, #4
 80013cc:	623b      	str	r3, [r7, #32]
          break;
 80013ce:	e013      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d105      	bne.n	80013e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d8:	2308      	movs	r3, #8
 80013da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	611a      	str	r2, [r3, #16]
          break;
 80013e2:	e009      	b.n	80013f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e4:	2308      	movs	r3, #8
 80013e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	615a      	str	r2, [r3, #20]
          break;
 80013ee:	e003      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
          break;
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x130>
          break;
 80013f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d801      	bhi.n	8001402 <HAL_GPIO_Init+0x13a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	e001      	b.n	8001406 <HAL_GPIO_Init+0x13e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3304      	adds	r3, #4
 8001406:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2bff      	cmp	r3, #255	; 0xff
 800140c:	d802      	bhi.n	8001414 <HAL_GPIO_Init+0x14c>
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	e002      	b.n	800141a <HAL_GPIO_Init+0x152>
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	3b08      	subs	r3, #8
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	210f      	movs	r1, #15
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	401a      	ands	r2, r3
 800142c:	6a39      	ldr	r1, [r7, #32]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	431a      	orrs	r2, r3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80b1 	beq.w	80015aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001448:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a4c      	ldr	r2, [pc, #304]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <HAL_GPIO_Init+0x2b8>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001460:	4a48      	ldr	r2, [pc, #288]	; (8001584 <HAL_GPIO_Init+0x2bc>)
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a40      	ldr	r2, [pc, #256]	; (8001588 <HAL_GPIO_Init+0x2c0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d013      	beq.n	80014b4 <HAL_GPIO_Init+0x1ec>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a3f      	ldr	r2, [pc, #252]	; (800158c <HAL_GPIO_Init+0x2c4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d00d      	beq.n	80014b0 <HAL_GPIO_Init+0x1e8>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a3e      	ldr	r2, [pc, #248]	; (8001590 <HAL_GPIO_Init+0x2c8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d007      	beq.n	80014ac <HAL_GPIO_Init+0x1e4>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a3d      	ldr	r2, [pc, #244]	; (8001594 <HAL_GPIO_Init+0x2cc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d101      	bne.n	80014a8 <HAL_GPIO_Init+0x1e0>
 80014a4:	2303      	movs	r3, #3
 80014a6:	e006      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014a8:	2304      	movs	r3, #4
 80014aa:	e004      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e002      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <HAL_GPIO_Init+0x1ee>
 80014b4:	2300      	movs	r3, #0
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	f002 0203 	and.w	r2, r2, #3
 80014bc:	0092      	lsls	r2, r2, #2
 80014be:	4093      	lsls	r3, r2
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014c6:	492f      	ldr	r1, [pc, #188]	; (8001584 <HAL_GPIO_Init+0x2bc>)
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	492c      	ldr	r1, [pc, #176]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4928      	ldr	r1, [pc, #160]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d006      	beq.n	8001516 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	4922      	ldr	r1, [pc, #136]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	60cb      	str	r3, [r1, #12]
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	43db      	mvns	r3, r3
 800151e:	491e      	ldr	r1, [pc, #120]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001520:	4013      	ands	r3, r2
 8001522:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4918      	ldr	r1, [pc, #96]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	4914      	ldr	r1, [pc, #80]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 8001548:	4013      	ands	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d021      	beq.n	800159c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	490e      	ldr	r1, [pc, #56]	; (8001598 <HAL_GPIO_Init+0x2d0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
 8001564:	e021      	b.n	80015aa <HAL_GPIO_Init+0x2e2>
 8001566:	bf00      	nop
 8001568:	10320000 	.word	0x10320000
 800156c:	10310000 	.word	0x10310000
 8001570:	10220000 	.word	0x10220000
 8001574:	10210000 	.word	0x10210000
 8001578:	10120000 	.word	0x10120000
 800157c:	10110000 	.word	0x10110000
 8001580:	40021000 	.word	0x40021000
 8001584:	40010000 	.word	0x40010000
 8001588:	40010800 	.word	0x40010800
 800158c:	40010c00 	.word	0x40010c00
 8001590:	40011000 	.word	0x40011000
 8001594:	40011400 	.word	0x40011400
 8001598:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_GPIO_Init+0x304>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	4909      	ldr	r1, [pc, #36]	; (80015cc <HAL_GPIO_Init+0x304>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	3301      	adds	r3, #1
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f47f ae8e 	bne.w	80012dc <HAL_GPIO_Init+0x14>
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	372c      	adds	r7, #44	; 0x2c
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	40010400 	.word	0x40010400

080015d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	887b      	ldrh	r3, [r7, #2]
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015e8:	2301      	movs	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	e001      	b.n	80015f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	807b      	strh	r3, [r7, #2]
 800160a:	4613      	mov	r3, r2
 800160c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800160e:	787b      	ldrb	r3, [r7, #1]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001614:	887a      	ldrh	r2, [r7, #2]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800161a:	e003      	b.n	8001624 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800161c:	887b      	ldrh	r3, [r7, #2]
 800161e:	041a      	lsls	r2, r3, #16
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	611a      	str	r2, [r3, #16]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800162e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001630:	b08b      	sub	sp, #44	; 0x2c
 8001632:	af06      	add	r7, sp, #24
 8001634:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0f1      	b.n	8001824 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d106      	bne.n	800165a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f006 fcb7 	bl	8007fc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2203      	movs	r2, #3
 800165e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f002 fdce 	bl	8004208 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	687e      	ldr	r6, [r7, #4]
 8001674:	466d      	mov	r5, sp
 8001676:	f106 0410 	add.w	r4, r6, #16
 800167a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800167c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	602b      	str	r3, [r5, #0]
 8001682:	1d33      	adds	r3, r6, #4
 8001684:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001686:	6838      	ldr	r0, [r7, #0]
 8001688:	f002 fd98 	bl	80041bc <USB_CoreInit>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2202      	movs	r2, #2
 8001696:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0c2      	b.n	8001824 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 fdc9 	bl	800423c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	e040      	b.n	8001732 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	3301      	adds	r3, #1
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	7bfa      	ldrb	r2, [r7, #15]
 80016d8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	3303      	adds	r3, #3
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	3338      	adds	r3, #56	; 0x38
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	333c      	adds	r3, #60	; 0x3c
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	3340      	adds	r3, #64	; 0x40
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	3301      	adds	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	d3b9      	bcc.n	80016b0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e044      	b.n	80017cc <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001758:	7bfa      	ldrb	r2, [r7, #15]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	440b      	add	r3, r1
 8001766:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017b0:	7bfa      	ldrb	r2, [r7, #15]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	3301      	adds	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d3b5      	bcc.n	8001742 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	687e      	ldr	r6, [r7, #4]
 80017de:	466d      	mov	r5, sp
 80017e0:	f106 0410 	add.w	r4, r6, #16
 80017e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	602b      	str	r3, [r5, #0]
 80017ec:	1d33      	adds	r3, r6, #4
 80017ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f002 fd2f 	bl	8004254 <USB_DevInit>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2202      	movs	r2, #2
 8001800:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e00d      	b.n	8001824 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f004 ffb0 	bl	8006782 <USB_DevDisconnect>

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800182c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_PCD_Start+0x16>
 800183e:	2302      	movs	r3, #2
 8001840:	e016      	b.n	8001870 <HAL_PCD_Start+0x44>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f002 fcc4 	bl	80041dc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001854:	2101      	movs	r1, #1
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f006 fe05 	bl	8008466 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f004 ff84 	bl	800676e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f004 ff86 	bl	8006796 <USB_ReadInterrupts>
 800188a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fb04 	bl	8001ea4 <PCD_EP_ISR_Handler>

    return;
 800189c:	e119      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d013      	beq.n	80018d0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ba:	b292      	uxth	r2, r2
 80018bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f006 fbfc 	bl	80080be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80018c6:	2100      	movs	r1, #0
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f905 	bl	8001ad8 <HAL_PCD_SetAddress>

    return;
 80018ce:	e100      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00c      	beq.n	80018f4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018ec:	b292      	uxth	r2, r2
 80018ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80018f2:	e0ee      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00c      	beq.n	8001918 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001910:	b292      	uxth	r2, r2
 8001912:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001916:	e0dc      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d027      	beq.n	8001972 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800192a:	b29a      	uxth	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0204 	bic.w	r2, r2, #4
 8001934:	b292      	uxth	r2, r2
 8001936:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001942:	b29a      	uxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0208 	bic.w	r2, r2, #8
 800194c:	b292      	uxth	r2, r2
 800194e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f006 fbec 	bl	8008130 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001960:	b29a      	uxth	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800196a:	b292      	uxth	r2, r2
 800196c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001970:	e0af      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 8083 	beq.w	8001a84 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800197e:	2300      	movs	r3, #0
 8001980:	77fb      	strb	r3, [r7, #31]
 8001982:	e010      	b.n	80019a6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	7ffb      	ldrb	r3, [r7, #31]
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	441a      	add	r2, r3
 8001990:	7ffb      	ldrb	r3, [r7, #31]
 8001992:	8812      	ldrh	r2, [r2, #0]
 8001994:	b292      	uxth	r2, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	3320      	adds	r3, #32
 800199a:	443b      	add	r3, r7
 800199c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80019a0:	7ffb      	ldrb	r3, [r7, #31]
 80019a2:	3301      	adds	r3, #1
 80019a4:	77fb      	strb	r3, [r7, #31]
 80019a6:	7ffb      	ldrb	r3, [r7, #31]
 80019a8:	2b07      	cmp	r3, #7
 80019aa:	d9eb      	bls.n	8001984 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	b292      	uxth	r2, r2
 80019c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	b292      	uxth	r2, r2
 80019d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80019dc:	bf00      	nop
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f6      	beq.n	80019de <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a02:	b292      	uxth	r2, r2
 8001a04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	77fb      	strb	r3, [r7, #31]
 8001a0c:	e00f      	b.n	8001a2e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001a0e:	7ffb      	ldrb	r3, [r7, #31]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	4611      	mov	r1, r2
 8001a16:	7ffa      	ldrb	r2, [r7, #31]
 8001a18:	0092      	lsls	r2, r2, #2
 8001a1a:	440a      	add	r2, r1
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	3320      	adds	r3, #32
 8001a20:	443b      	add	r3, r7
 8001a22:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001a26:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001a28:	7ffb      	ldrb	r3, [r7, #31]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	77fb      	strb	r3, [r7, #31]
 8001a2e:	7ffb      	ldrb	r3, [r7, #31]
 8001a30:	2b07      	cmp	r3, #7
 8001a32:	d9ec      	bls.n	8001a0e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0208 	orr.w	r2, r2, #8
 8001a46:	b292      	uxth	r2, r2
 8001a48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0204 	orr.w	r2, r2, #4
 8001a76:	b292      	uxth	r2, r2
 8001a78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f006 fb3d 	bl	80080fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a82:	e026      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00f      	beq.n	8001aae <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001aa0:	b292      	uxth	r2, r2
 8001aa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f006 fafb 	bl	80080a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001aac:	e011      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00c      	beq.n	8001ad2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aca:	b292      	uxth	r2, r2
 8001acc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ad0:	bf00      	nop
  }
}
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_PCD_SetAddress+0x1a>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e013      	b.n	8001b1a <HAL_PCD_SetAddress+0x42>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	78fa      	ldrb	r2, [r7, #3]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 fe1c 	bl	8006748 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	4608      	mov	r0, r1
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4603      	mov	r3, r0
 8001b32:	70fb      	strb	r3, [r7, #3]
 8001b34:	460b      	mov	r3, r1
 8001b36:	803b      	strh	r3, [r7, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	da0e      	bge.n	8001b66 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	705a      	strb	r2, [r3, #1]
 8001b64:	e00e      	b.n	8001b84 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	f003 0207 	and.w	r2, r3, #7
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b90:	883a      	ldrh	r2, [r7, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	78ba      	ldrb	r2, [r7, #2]
 8001b9a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b9c:	78bb      	ldrb	r3, [r7, #2]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d102      	bne.n	8001ba8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_PCD_EP_Open+0x94>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e00e      	b.n	8001bd4 <HAL_PCD_EP_Open+0xb2>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68f9      	ldr	r1, [r7, #12]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 fb65 	bl	8004294 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001bd2:	7afb      	ldrb	r3, [r7, #11]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001be8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da0e      	bge.n	8001c0e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	705a      	strb	r2, [r3, #1]
 8001c0c:	e00e      	b.n	8001c2c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 0207 	and.w	r2, r3, #7
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_PCD_EP_Close+0x6a>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e00e      	b.n	8001c64 <HAL_PCD_EP_Close+0x88>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68f9      	ldr	r1, [r7, #12]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 fedd 	bl	8004a14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c7c:	7afb      	ldrb	r3, [r7, #11]
 8001c7e:	f003 0207 	and.w	r2, r3, #7
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cac:	7afb      	ldrb	r3, [r7, #11]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6979      	ldr	r1, [r7, #20]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 f894 	bl	8004dec <USB_EPStartXfer>

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2200      	movs	r2, #0
 8001d12:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2201      	movs	r2, #1
 8001d18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6979      	ldr	r1, [r7, #20]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 f85d 	bl	8004dec <USB_EPStartXfer>

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	f003 0207 	and.w	r2, r3, #7
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d901      	bls.n	8001d5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e04c      	b.n	8001df4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	da0e      	bge.n	8001d80 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	705a      	strb	r2, [r3, #1]
 8001d7e:	e00c      	b.n	8001d9a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_PCD_EP_SetStall+0x7e>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e01c      	b.n	8001df4 <HAL_PCD_EP_SetStall+0xb8>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68f9      	ldr	r1, [r7, #12]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f004 fbc0 	bl	800654e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d108      	bne.n	8001dea <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001de2:	4619      	mov	r1, r3
 8001de4:	4610      	mov	r0, r2
 8001de6:	f004 fce5 	bl	80067b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	f003 020f 	and.w	r2, r3, #15
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d901      	bls.n	8001e1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e040      	b.n	8001e9c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da0e      	bge.n	8001e40 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	705a      	strb	r2, [r3, #1]
 8001e3e:	e00e      	b.n	8001e5e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f003 0207 	and.w	r2, r3, #7
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_PCD_EP_ClrStall+0x82>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e00e      	b.n	8001e9c <HAL_PCD_EP_ClrStall+0xa0>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68f9      	ldr	r1, [r7, #12]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f004 fbae 	bl	80065ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b096      	sub	sp, #88	; 0x58
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001eac:	e3bf      	b.n	800262e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001eba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001ec8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f040 8179 	bne.w	80021c4 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ed2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d152      	bne.n	8001f84 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eee:	81fb      	strh	r3, [r7, #14]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	89fb      	ldrh	r3, [r7, #14]
 8001ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3328      	adds	r3, #40	; 0x28
 8001f06:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	441a      	add	r2, r3
 8001f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f40:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f42:	2100      	movs	r1, #0
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f006 f892 	bl	800806e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 836b 	beq.w	800262e <PCD_EP_ISR_Handler+0x78a>
 8001f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f040 8366 	bne.w	800262e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	b292      	uxth	r2, r2
 8001f76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f82:	e354      	b.n	800262e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f8a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d034      	beq.n	800200c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3306      	adds	r3, #6
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fcc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fda:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fde:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	f004 fc37 	bl	8006854 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	823b      	strh	r3, [r7, #16]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	8a3a      	ldrh	r2, [r7, #16]
 8001ffc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002000:	b292      	uxth	r2, r2
 8002002:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f006 f805 	bl	8008014 <HAL_PCD_SetupStageCallback>
 800200a:	e310      	b.n	800262e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800200c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002010:	2b00      	cmp	r3, #0
 8002012:	f280 830c 	bge.w	800262e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b29a      	uxth	r2, r3
 800201e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002022:	4013      	ands	r3, r2
 8002024:	83fb      	strh	r3, [r7, #30]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	8bfa      	ldrh	r2, [r7, #30]
 800202c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002030:	b292      	uxth	r2, r2
 8002032:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800203c:	b29b      	uxth	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	3306      	adds	r3, #6
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800205c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d019      	beq.n	800209c <PCD_EP_ISR_Handler+0x1f8>
 8002068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d015      	beq.n	800209c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002076:	6959      	ldr	r1, [r3, #20]
 8002078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800207c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002080:	b29b      	uxth	r3, r3
 8002082:	f004 fbe7 	bl	8006854 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	441a      	add	r2, r3
 8002090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002092:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002094:	2100      	movs	r1, #0
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f005 ffce 	bl	8008038 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80020a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80020aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 82bd 	bne.w	800262e <PCD_EP_ISR_Handler+0x78a>
 80020b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80020b8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80020bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80020c0:	f000 82b5 	beq.w	800262e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	461a      	mov	r2, r3
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4413      	add	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	801a      	strh	r2, [r3, #0]
 80020f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b3e      	cmp	r3, #62	; 0x3e
 80020fa:	d91d      	bls.n	8002138 <PCD_EP_ISR_Handler+0x294>
 80020fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	647b      	str	r3, [r7, #68]	; 0x44
 8002104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <PCD_EP_ISR_Handler+0x272>
 8002110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002112:	3b01      	subs	r3, #1
 8002114:	647b      	str	r3, [r7, #68]	; 0x44
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	b29a      	uxth	r2, r3
 800211c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211e:	b29b      	uxth	r3, r3
 8002120:	029b      	lsls	r3, r3, #10
 8002122:	b29b      	uxth	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	b29b      	uxth	r3, r3
 8002128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800212c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002130:	b29a      	uxth	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	801a      	strh	r2, [r3, #0]
 8002136:	e026      	b.n	8002186 <PCD_EP_ISR_Handler+0x2e2>
 8002138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <PCD_EP_ISR_Handler+0x2b2>
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	b29b      	uxth	r3, r3
 8002146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800214a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800214e:	b29a      	uxth	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	801a      	strh	r2, [r3, #0]
 8002154:	e017      	b.n	8002186 <PCD_EP_ISR_Handler+0x2e2>
 8002156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	085b      	lsrs	r3, r3, #1
 800215c:	647b      	str	r3, [r7, #68]	; 0x44
 800215e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <PCD_EP_ISR_Handler+0x2cc>
 800216a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800216c:	3301      	adds	r3, #1
 800216e:	647b      	str	r3, [r7, #68]	; 0x44
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b29a      	uxth	r2, r3
 8002176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002178:	b29b      	uxth	r3, r3
 800217a:	029b      	lsls	r3, r3, #10
 800217c:	b29b      	uxth	r3, r3
 800217e:	4313      	orrs	r3, r2
 8002180:	b29a      	uxth	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	b29b      	uxth	r3, r3
 800218e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002196:	827b      	strh	r3, [r7, #18]
 8002198:	8a7b      	ldrh	r3, [r7, #18]
 800219a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800219e:	827b      	strh	r3, [r7, #18]
 80021a0:	8a7b      	ldrh	r3, [r7, #18]
 80021a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021a6:	827b      	strh	r3, [r7, #18]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	8a7b      	ldrh	r3, [r7, #18]
 80021ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021be:	b29b      	uxth	r3, r3
 80021c0:	8013      	strh	r3, [r2, #0]
 80021c2:	e234      	b.n	800262e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021d8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f280 80fc 	bge.w	80023da <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021f8:	4013      	ands	r3, r2
 80021fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002210:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002214:	b292      	uxth	r2, r2
 8002216:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002218:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4413      	add	r3, r2
 800222c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800222e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002230:	7b1b      	ldrb	r3, [r3, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d125      	bne.n	8002282 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223e:	b29b      	uxth	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	3306      	adds	r3, #6
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	4413      	add	r3, r2
 8002254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002262:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8092 	beq.w	8002390 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002272:	6959      	ldr	r1, [r3, #20]
 8002274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002276:	88da      	ldrh	r2, [r3, #6]
 8002278:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800227c:	f004 faea 	bl	8006854 <USB_ReadPMA>
 8002280:	e086      	b.n	8002390 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002284:	78db      	ldrb	r3, [r3, #3]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d10a      	bne.n	80022a0 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800228a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800228e:	461a      	mov	r2, r3
 8002290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f9d9 	bl	800264a <HAL_PCD_EP_DB_Receive>
 8002298:	4603      	mov	r3, r0
 800229a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800229e:	e077      	b.n	8002390 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	441a      	add	r2, r3
 80022cc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80022d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d024      	beq.n	8002348 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002306:	b29b      	uxth	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	3302      	adds	r3, #2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002326:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800232a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800232e:	2b00      	cmp	r3, #0
 8002330:	d02e      	beq.n	8002390 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002338:	6959      	ldr	r1, [r3, #20]
 800233a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233c:	891a      	ldrh	r2, [r3, #8]
 800233e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002342:	f004 fa87 	bl	8006854 <USB_ReadPMA>
 8002346:	e023      	b.n	8002390 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002350:	b29b      	uxth	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	3306      	adds	r3, #6
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002370:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002374:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002378:	2b00      	cmp	r3, #0
 800237a:	d009      	beq.n	8002390 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002382:	6959      	ldr	r1, [r3, #20]
 8002384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002386:	895a      	ldrh	r2, [r3, #10]
 8002388:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800238c:	f004 fa62 	bl	8006854 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002398:	441a      	add	r2, r3
 800239a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800239c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800239e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80023a6:	441a      	add	r2, r3
 80023a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80023ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <PCD_EP_ISR_Handler+0x51c>
 80023b4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80023b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d206      	bcs.n	80023ce <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f005 fe36 	bl	8008038 <HAL_PCD_DataOutStageCallback>
 80023cc:	e005      	b.n	80023da <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023d4:	4618      	mov	r0, r3
 80023d6:	f002 fd09 	bl	8004dec <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8123 	beq.w	800262e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80023e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002416:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	441a      	add	r2, r3
 8002428:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800242c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002434:	b29b      	uxth	r3, r3
 8002436:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243a:	78db      	ldrb	r3, [r3, #3]
 800243c:	2b01      	cmp	r3, #1
 800243e:	f040 80a2 	bne.w	8002586 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244a:	7b1b      	ldrb	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 8093 	beq.w	8002578 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002452:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d046      	beq.n	80024ec <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800245e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002460:	785b      	ldrb	r3, [r3, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d126      	bne.n	80024b4 <PCD_EP_ISR_Handler+0x610>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002474:	b29b      	uxth	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	4413      	add	r3, r2
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	011a      	lsls	r2, r3, #4
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	4413      	add	r3, r2
 8002488:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800248c:	623b      	str	r3, [r7, #32]
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002498:	b29a      	uxth	r2, r3
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	801a      	strh	r2, [r3, #0]
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	801a      	strh	r2, [r3, #0]
 80024b2:	e061      	b.n	8002578 <PCD_EP_ISR_Handler+0x6d4>
 80024b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b6:	785b      	ldrb	r3, [r3, #1]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d15d      	bne.n	8002578 <PCD_EP_ISR_Handler+0x6d4>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	4413      	add	r3, r2
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	011a      	lsls	r2, r3, #4
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	4413      	add	r3, r2
 80024de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e6:	2200      	movs	r2, #0
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	e045      	b.n	8002578 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f4:	785b      	ldrb	r3, [r3, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d126      	bne.n	8002548 <PCD_EP_ISR_Handler+0x6a4>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002508:	b29b      	uxth	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250e:	4413      	add	r3, r2
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
 8002512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	011a      	lsls	r2, r3, #4
 8002518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251a:	4413      	add	r3, r2
 800251c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002520:	633b      	str	r3, [r7, #48]	; 0x30
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800252c:	b29a      	uxth	r2, r3
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	801a      	strh	r2, [r3, #0]
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002540:	b29a      	uxth	r2, r3
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	801a      	strh	r2, [r3, #0]
 8002546:	e017      	b.n	8002578 <PCD_EP_ISR_Handler+0x6d4>
 8002548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254a:	785b      	ldrb	r3, [r3, #1]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d113      	bne.n	8002578 <PCD_EP_ISR_Handler+0x6d4>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255e:	4413      	add	r3, r2
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	011a      	lsls	r2, r3, #4
 8002568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800256a:	4413      	add	r3, r2
 800256c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002570:	63bb      	str	r3, [r7, #56]	; 0x38
 8002572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002574:	2200      	movs	r2, #0
 8002576:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f005 fd75 	bl	800806e <HAL_PCD_DataInStageCallback>
 8002584:	e053      	b.n	800262e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002586:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d146      	bne.n	8002620 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4413      	add	r3, r2
 80025a6:	3302      	adds	r3, #2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80025be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d907      	bls.n	80025da <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80025ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025d2:	1ad2      	subs	r2, r2, r3
 80025d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d6:	619a      	str	r2, [r3, #24]
 80025d8:	e002      	b.n	80025e0 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80025da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80025e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d106      	bne.n	80025f6 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f005 fd3d 	bl	800806e <HAL_PCD_DataInStageCallback>
 80025f4:	e01b      	b.n	800262e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80025f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025fe:	441a      	add	r2, r3
 8002600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002602:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800260c:	441a      	add	r2, r3
 800260e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002610:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002618:	4618      	mov	r0, r3
 800261a:	f002 fbe7 	bl	8004dec <USB_EPStartXfer>
 800261e:	e006      	b.n	800262e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002620:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002624:	461a      	mov	r2, r3
 8002626:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f91b 	bl	8002864 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002636:	b29b      	uxth	r3, r3
 8002638:	b21b      	sxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	f6ff ac37 	blt.w	8001eae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3758      	adds	r7, #88	; 0x58
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b088      	sub	sp, #32
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	4613      	mov	r3, r2
 8002656:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d07e      	beq.n	8002760 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266a:	b29b      	uxth	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	3302      	adds	r3, #2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	4413      	add	r3, r2
 8002680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	699a      	ldr	r2, [r3, #24]
 8002690:	8b7b      	ldrh	r3, [r7, #26]
 8002692:	429a      	cmp	r2, r3
 8002694:	d306      	bcc.n	80026a4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	8b7b      	ldrh	r3, [r7, #26]
 800269c:	1ad2      	subs	r2, r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	619a      	str	r2, [r3, #24]
 80026a2:	e002      	b.n	80026aa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2200      	movs	r2, #0
 80026a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d123      	bne.n	80026fa <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026cc:	833b      	strh	r3, [r7, #24]
 80026ce:	8b3b      	ldrh	r3, [r7, #24]
 80026d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026d4:	833b      	strh	r3, [r7, #24]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	441a      	add	r2, r3
 80026e4:	8b3b      	ldrh	r3, [r7, #24]
 80026e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01f      	beq.n	8002744 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	b29b      	uxth	r3, r3
 8002716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800271a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271e:	82fb      	strh	r3, [r7, #22]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	441a      	add	r2, r3
 800272e:	8afb      	ldrh	r3, [r7, #22]
 8002730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800273c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002740:	b29b      	uxth	r3, r3
 8002742:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002744:	8b7b      	ldrh	r3, [r7, #26]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8087 	beq.w	800285a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	6959      	ldr	r1, [r3, #20]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	891a      	ldrh	r2, [r3, #8]
 8002758:	8b7b      	ldrh	r3, [r7, #26]
 800275a:	f004 f87b 	bl	8006854 <USB_ReadPMA>
 800275e:	e07c      	b.n	800285a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002768:	b29b      	uxth	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	3306      	adds	r3, #6
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002788:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	699a      	ldr	r2, [r3, #24]
 800278e:	8b7b      	ldrh	r3, [r7, #26]
 8002790:	429a      	cmp	r2, r3
 8002792:	d306      	bcc.n	80027a2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	699a      	ldr	r2, [r3, #24]
 8002798:	8b7b      	ldrh	r3, [r7, #26]
 800279a:	1ad2      	subs	r2, r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	619a      	str	r2, [r3, #24]
 80027a0:	e002      	b.n	80027a8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d123      	bne.n	80027f8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ca:	83fb      	strh	r3, [r7, #30]
 80027cc:	8bfb      	ldrh	r3, [r7, #30]
 80027ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027d2:	83fb      	strh	r3, [r7, #30]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	441a      	add	r2, r3
 80027e2:	8bfb      	ldrh	r3, [r7, #30]
 80027e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d11f      	bne.n	8002842 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281c:	83bb      	strh	r3, [r7, #28]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	441a      	add	r2, r3
 800282c:	8bbb      	ldrh	r3, [r7, #28]
 800282e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800283e:	b29b      	uxth	r3, r3
 8002840:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002842:	8b7b      	ldrh	r3, [r7, #26]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	6959      	ldr	r1, [r3, #20]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	895a      	ldrh	r2, [r3, #10]
 8002854:	8b7b      	ldrh	r3, [r7, #26]
 8002856:	f003 fffd 	bl	8006854 <USB_ReadPMA>
    }
  }

  return count;
 800285a:	8b7b      	ldrh	r3, [r7, #26]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b0a4      	sub	sp, #144	; 0x90
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 81dd 	beq.w	8002c38 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002886:	b29b      	uxth	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	3302      	adds	r3, #2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d907      	bls.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028be:	1ad2      	subs	r2, r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	619a      	str	r2, [r3, #24]
 80028c4:	e002      	b.n	80028cc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f040 80b9 	bne.w	8002a48 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	785b      	ldrb	r3, [r3, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d126      	bne.n	800292c <HAL_PCD_EP_DB_Transmit+0xc8>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f2:	4413      	add	r3, r2
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	011a      	lsls	r2, r3, #4
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	4413      	add	r3, r2
 8002900:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002910:	b29a      	uxth	r2, r3
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	801a      	strh	r2, [r3, #0]
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002924:	b29a      	uxth	r2, r3
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	801a      	strh	r2, [r3, #0]
 800292a:	e01a      	b.n	8002962 <HAL_PCD_EP_DB_Transmit+0xfe>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	785b      	ldrb	r3, [r3, #1]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d116      	bne.n	8002962 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	637b      	str	r3, [r7, #52]	; 0x34
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002942:	b29b      	uxth	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002948:	4413      	add	r3, r2
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	011a      	lsls	r2, r3, #4
 8002952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002954:	4413      	add	r3, r2
 8002956:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	2200      	movs	r2, #0
 8002960:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	785b      	ldrb	r3, [r3, #1]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d126      	bne.n	80029be <HAL_PCD_EP_DB_Transmit+0x15a>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800297e:	b29b      	uxth	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	011a      	lsls	r2, r3, #4
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	4413      	add	r3, r2
 8002992:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	801a      	strh	r2, [r3, #0]
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	801a      	strh	r2, [r3, #0]
 80029bc:	e017      	b.n	80029ee <HAL_PCD_EP_DB_Transmit+0x18a>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	785b      	ldrb	r3, [r3, #1]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d113      	bne.n	80029ee <HAL_PCD_EP_DB_Transmit+0x18a>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	4413      	add	r3, r2
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	011a      	lsls	r2, r3, #4
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	4413      	add	r3, r2
 80029e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029e6:	623b      	str	r3, [r7, #32]
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	2200      	movs	r2, #0
 80029ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	4619      	mov	r1, r3
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f005 fb3a 	bl	800806e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 82fc 	beq.w	8002ffe <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a20:	82fb      	strh	r3, [r7, #22]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	441a      	add	r2, r3
 8002a30:	8afb      	ldrh	r3, [r7, #22]
 8002a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	8013      	strh	r3, [r2, #0]
 8002a46:	e2da      	b.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d021      	beq.n	8002a96 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	441a      	add	r2, r3
 8002a7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	f040 82ae 	bne.w	8002ffe <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002aaa:	441a      	add	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ab8:	441a      	add	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	6a1a      	ldr	r2, [r3, #32]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d30b      	bcc.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	6a1a      	ldr	r2, [r3, #32]
 8002ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ada:	1ad2      	subs	r2, r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	621a      	str	r2, [r3, #32]
 8002ae0:	e017      	b.n	8002b12 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d108      	bne.n	8002afc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002aea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002afa:	e00a      	b.n	8002b12 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	785b      	ldrb	r3, [r3, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d165      	bne.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x382>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2e:	4413      	add	r3, r2
 8002b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	011a      	lsls	r2, r3, #4
 8002b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b40:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b50:	801a      	strh	r2, [r3, #0]
 8002b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b56:	2b3e      	cmp	r3, #62	; 0x3e
 8002b58:	d91d      	bls.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x332>
 8002b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <HAL_PCD_EP_DB_Transmit+0x310>
 8002b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b70:	3b01      	subs	r3, #1
 8002b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	029b      	lsls	r3, r3, #10
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	4313      	orrs	r3, r2
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b92:	801a      	strh	r2, [r3, #0]
 8002b94:	e044      	b.n	8002c20 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <HAL_PCD_EP_DB_Transmit+0x350>
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	e035      	b.n	8002c20 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_PCD_EP_DB_Transmit+0x36a>
 8002bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bca:	3301      	adds	r3, #1
 8002bcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	029b      	lsls	r3, r3, #10
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be2:	801a      	strh	r2, [r3, #0]
 8002be4:	e01c      	b.n	8002c20 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	785b      	ldrb	r3, [r3, #1]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d118      	bne.n	8002c20 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c02:	4413      	add	r3, r2
 8002c04:	647b      	str	r3, [r7, #68]	; 0x44
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	011a      	lsls	r2, r3, #4
 8002c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0e:	4413      	add	r3, r2
 8002c10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c14:	643b      	str	r3, [r7, #64]	; 0x40
 8002c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	6959      	ldr	r1, [r3, #20]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	891a      	ldrh	r2, [r3, #8]
 8002c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f003 fdca 	bl	80067ca <USB_WritePMA>
 8002c36:	e1e2      	b.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3306      	adds	r3, #6
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c60:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d307      	bcc.n	8002c80 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	699a      	ldr	r2, [r3, #24]
 8002c74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c78:	1ad2      	subs	r2, r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	619a      	str	r2, [r3, #24]
 8002c7e:	e002      	b.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2200      	movs	r2, #0
 8002c84:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 80c0 	bne.w	8002e10 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	785b      	ldrb	r3, [r3, #1]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d126      	bne.n	8002ce6 <HAL_PCD_EP_DB_Transmit+0x482>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cac:	4413      	add	r3, r2
 8002cae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	011a      	lsls	r2, r3, #4
 8002cb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cb8:	4413      	add	r3, r2
 8002cba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cbe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cce:	801a      	strh	r2, [r3, #0]
 8002cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce2:	801a      	strh	r2, [r3, #0]
 8002ce4:	e01a      	b.n	8002d1c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	785b      	ldrb	r3, [r3, #1]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d116      	bne.n	8002d1c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	667b      	str	r3, [r7, #100]	; 0x64
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d02:	4413      	add	r3, r2
 8002d04:	667b      	str	r3, [r7, #100]	; 0x64
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	011a      	lsls	r2, r3, #4
 8002d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d0e:	4413      	add	r3, r2
 8002d10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d14:	663b      	str	r3, [r7, #96]	; 0x60
 8002d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d18:	2200      	movs	r2, #0
 8002d1a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	677b      	str	r3, [r7, #116]	; 0x74
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	785b      	ldrb	r3, [r3, #1]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d12b      	bne.n	8002d82 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3e:	4413      	add	r3, r2
 8002d40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	011a      	lsls	r2, r3, #4
 8002d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d66:	801a      	strh	r2, [r3, #0]
 8002d68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d7e:	801a      	strh	r2, [r3, #0]
 8002d80:	e017      	b.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	785b      	ldrb	r3, [r3, #1]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d113      	bne.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d98:	4413      	add	r3, r2
 8002d9a:	677b      	str	r3, [r7, #116]	; 0x74
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	011a      	lsls	r2, r3, #4
 8002da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da4:	4413      	add	r3, r2
 8002da6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002daa:	673b      	str	r3, [r7, #112]	; 0x70
 8002dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dae:	2200      	movs	r2, #0
 8002db0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	4619      	mov	r1, r3
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f005 f958 	bl	800806e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 811a 	bne.w	8002ffe <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	441a      	add	r2, r3
 8002df6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	8013      	strh	r3, [r2, #0]
 8002e0e:	e0f6      	b.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d121      	bne.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	441a      	add	r2, r3
 8002e46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	f040 80ca 	bne.w	8002ffe <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e72:	441a      	add	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e80:	441a      	add	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	6a1a      	ldr	r2, [r3, #32]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d30b      	bcc.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	6a1a      	ldr	r2, [r3, #32]
 8002e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ea2:	1ad2      	subs	r2, r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	621a      	str	r2, [r3, #32]
 8002ea8:	e017      	b.n	8002eda <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d108      	bne.n	8002ec4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002eb2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002eb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ec2:	e00a      	b.n	8002eda <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	657b      	str	r3, [r7, #84]	; 0x54
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	785b      	ldrb	r3, [r3, #1]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d165      	bne.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x750>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efc:	4413      	add	r3, r2
 8002efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	011a      	lsls	r2, r3, #4
 8002f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f08:	4413      	add	r3, r2
 8002f0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f1e:	801a      	strh	r2, [r3, #0]
 8002f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f24:	2b3e      	cmp	r3, #62	; 0x3e
 8002f26:	d91d      	bls.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x700>
 8002f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f2c:	095b      	lsrs	r3, r3, #5
 8002f2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d102      	bne.n	8002f42 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002f3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	029b      	lsls	r3, r3, #10
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	4313      	orrs	r3, r2
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f60:	801a      	strh	r2, [r3, #0]
 8002f62:	e041      	b.n	8002fe8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10a      	bne.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002f6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f7e:	801a      	strh	r2, [r3, #0]
 8002f80:	e032      	b.n	8002fe8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_PCD_EP_DB_Transmit+0x738>
 8002f96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f98:	3301      	adds	r3, #1
 8002f9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	029b      	lsls	r3, r3, #10
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	4313      	orrs	r3, r2
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb0:	801a      	strh	r2, [r3, #0]
 8002fb2:	e019      	b.n	8002fe8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	785b      	ldrb	r3, [r3, #1]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d115      	bne.n	8002fe8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fca:	4413      	add	r3, r2
 8002fcc:	657b      	str	r3, [r7, #84]	; 0x54
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	011a      	lsls	r2, r3, #4
 8002fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fdc:	653b      	str	r3, [r7, #80]	; 0x50
 8002fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fe6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	6959      	ldr	r1, [r3, #20]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	895a      	ldrh	r2, [r3, #10]
 8002ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f003 fbe6 	bl	80067ca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003018:	82bb      	strh	r3, [r7, #20]
 800301a:	8abb      	ldrh	r3, [r7, #20]
 800301c:	f083 0310 	eor.w	r3, r3, #16
 8003020:	82bb      	strh	r3, [r7, #20]
 8003022:	8abb      	ldrh	r3, [r7, #20]
 8003024:	f083 0320 	eor.w	r3, r3, #32
 8003028:	82bb      	strh	r3, [r7, #20]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	441a      	add	r2, r3
 8003038:	8abb      	ldrh	r3, [r7, #20]
 800303a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800303e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304a:	b29b      	uxth	r3, r3
 800304c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3790      	adds	r7, #144	; 0x90
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	817b      	strh	r3, [r7, #10]
 8003066:	4613      	mov	r3, r2
 8003068:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800306a:	897b      	ldrh	r3, [r7, #10]
 800306c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003076:	897b      	ldrh	r3, [r7, #10]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4413      	add	r3, r2
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	e009      	b.n	80030a2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800308e:	897a      	ldrh	r2, [r7, #10]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4413      	add	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030a2:	893b      	ldrh	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d107      	bne.n	80030b8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2200      	movs	r2, #0
 80030ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	80da      	strh	r2, [r3, #6]
 80030b6:	e00b      	b.n	80030d0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2201      	movs	r2, #1
 80030bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e272      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8087 	beq.w	800320a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030fc:	4b92      	ldr	r3, [pc, #584]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b04      	cmp	r3, #4
 8003106:	d00c      	beq.n	8003122 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003108:	4b8f      	ldr	r3, [pc, #572]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d112      	bne.n	800313a <HAL_RCC_OscConfig+0x5e>
 8003114:	4b8c      	ldr	r3, [pc, #560]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003120:	d10b      	bne.n	800313a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003122:	4b89      	ldr	r3, [pc, #548]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d06c      	beq.n	8003208 <HAL_RCC_OscConfig+0x12c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d168      	bne.n	8003208 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e24c      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x76>
 8003144:	4b80      	ldr	r3, [pc, #512]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a7f      	ldr	r2, [pc, #508]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800314a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	e02e      	b.n	80031b0 <HAL_RCC_OscConfig+0xd4>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x98>
 800315a:	4b7b      	ldr	r3, [pc, #492]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a7a      	ldr	r2, [pc, #488]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b78      	ldr	r3, [pc, #480]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a77      	ldr	r2, [pc, #476]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800316c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e01d      	b.n	80031b0 <HAL_RCC_OscConfig+0xd4>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0xbc>
 800317e:	4b72      	ldr	r3, [pc, #456]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a71      	ldr	r2, [pc, #452]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b6f      	ldr	r3, [pc, #444]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a6e      	ldr	r2, [pc, #440]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e00b      	b.n	80031b0 <HAL_RCC_OscConfig+0xd4>
 8003198:	4b6b      	ldr	r3, [pc, #428]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a6a      	ldr	r2, [pc, #424]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	4b68      	ldr	r3, [pc, #416]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a67      	ldr	r2, [pc, #412]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d013      	beq.n	80031e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fd fd80 	bl	8000cbc <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fd fd7c 	bl	8000cbc <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e200      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	4b5d      	ldr	r3, [pc, #372]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0xe4>
 80031de:	e014      	b.n	800320a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fd fd6c 	bl	8000cbc <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fd fd68 	bl	8000cbc <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e1ec      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	4b53      	ldr	r3, [pc, #332]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x10c>
 8003206:	e000      	b.n	800320a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d063      	beq.n	80032de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003216:	4b4c      	ldr	r3, [pc, #304]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003222:	4b49      	ldr	r3, [pc, #292]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b08      	cmp	r3, #8
 800322c:	d11c      	bne.n	8003268 <HAL_RCC_OscConfig+0x18c>
 800322e:	4b46      	ldr	r3, [pc, #280]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d116      	bne.n	8003268 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323a:	4b43      	ldr	r3, [pc, #268]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_RCC_OscConfig+0x176>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d001      	beq.n	8003252 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e1c0      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003252:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4939      	ldr	r1, [pc, #228]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	e03a      	b.n	80032de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003270:	4b36      	ldr	r3, [pc, #216]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003276:	f7fd fd21 	bl	8000cbc <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327e:	f7fd fd1d 	bl	8000cbc <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e1a1      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003290:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329c:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4927      	ldr	r1, [pc, #156]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	600b      	str	r3, [r1, #0]
 80032b0:	e015      	b.n	80032de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b2:	4b26      	ldr	r3, [pc, #152]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fd fd00 	bl	8000cbc <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c0:	f7fd fcfc 	bl	8000cbc <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e180      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d03a      	beq.n	8003360 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d019      	beq.n	8003326 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f2:	4b17      	ldr	r3, [pc, #92]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f8:	f7fd fce0 	bl	8000cbc <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003300:	f7fd fcdc 	bl	8000cbc <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e160      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003312:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800331e:	2001      	movs	r0, #1
 8003320:	f000 fa9e 	bl	8003860 <RCC_Delay>
 8003324:	e01c      	b.n	8003360 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332c:	f7fd fcc6 	bl	8000cbc <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003332:	e00f      	b.n	8003354 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003334:	f7fd fcc2 	bl	8000cbc <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d908      	bls.n	8003354 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e146      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	42420000 	.word	0x42420000
 8003350:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003354:	4b92      	ldr	r3, [pc, #584]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e9      	bne.n	8003334 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80a6 	beq.w	80034ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336e:	2300      	movs	r3, #0
 8003370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003372:	4b8b      	ldr	r3, [pc, #556]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10d      	bne.n	800339a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337e:	4b88      	ldr	r3, [pc, #544]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	4a87      	ldr	r2, [pc, #540]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003388:	61d3      	str	r3, [r2, #28]
 800338a:	4b85      	ldr	r3, [pc, #532]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339a:	4b82      	ldr	r3, [pc, #520]	; (80035a4 <HAL_RCC_OscConfig+0x4c8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d118      	bne.n	80033d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a6:	4b7f      	ldr	r3, [pc, #508]	; (80035a4 <HAL_RCC_OscConfig+0x4c8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7e      	ldr	r2, [pc, #504]	; (80035a4 <HAL_RCC_OscConfig+0x4c8>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b2:	f7fd fc83 	bl	8000cbc <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ba:	f7fd fc7f 	bl	8000cbc <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b64      	cmp	r3, #100	; 0x64
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e103      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033cc:	4b75      	ldr	r3, [pc, #468]	; (80035a4 <HAL_RCC_OscConfig+0x4c8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x312>
 80033e0:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	4a6e      	ldr	r2, [pc, #440]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6213      	str	r3, [r2, #32]
 80033ec:	e02d      	b.n	800344a <HAL_RCC_OscConfig+0x36e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x334>
 80033f6:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	4a69      	ldr	r2, [pc, #420]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	6213      	str	r3, [r2, #32]
 8003402:	4b67      	ldr	r3, [pc, #412]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4a66      	ldr	r2, [pc, #408]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	6213      	str	r3, [r2, #32]
 800340e:	e01c      	b.n	800344a <HAL_RCC_OscConfig+0x36e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b05      	cmp	r3, #5
 8003416:	d10c      	bne.n	8003432 <HAL_RCC_OscConfig+0x356>
 8003418:	4b61      	ldr	r3, [pc, #388]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	4a60      	ldr	r2, [pc, #384]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	6213      	str	r3, [r2, #32]
 8003424:	4b5e      	ldr	r3, [pc, #376]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4a5d      	ldr	r2, [pc, #372]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6213      	str	r3, [r2, #32]
 8003430:	e00b      	b.n	800344a <HAL_RCC_OscConfig+0x36e>
 8003432:	4b5b      	ldr	r3, [pc, #364]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	4a5a      	ldr	r2, [pc, #360]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	6213      	str	r3, [r2, #32]
 800343e:	4b58      	ldr	r3, [pc, #352]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	4a57      	ldr	r2, [pc, #348]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	f023 0304 	bic.w	r3, r3, #4
 8003448:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d015      	beq.n	800347e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003452:	f7fd fc33 	bl	8000cbc <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7fd fc2f 	bl	8000cbc <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f241 3288 	movw	r2, #5000	; 0x1388
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0b1      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003470:	4b4b      	ldr	r3, [pc, #300]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ee      	beq.n	800345a <HAL_RCC_OscConfig+0x37e>
 800347c:	e014      	b.n	80034a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7fd fc1d 	bl	8000cbc <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003484:	e00a      	b.n	800349c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fd fc19 	bl	8000cbc <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e09b      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349c:	4b40      	ldr	r3, [pc, #256]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1ee      	bne.n	8003486 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ae:	4b3c      	ldr	r3, [pc, #240]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	4a3b      	ldr	r2, [pc, #236]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8087 	beq.w	80035d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d061      	beq.n	8003594 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d146      	bne.n	8003566 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d8:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fd fbed 	bl	8000cbc <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fd fbe9 	bl	8000cbc <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e06d      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f8:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f0      	bne.n	80034e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350c:	d108      	bne.n	8003520 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800350e:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	4921      	ldr	r1, [pc, #132]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003520:	4b1f      	ldr	r3, [pc, #124]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a19      	ldr	r1, [r3, #32]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	430b      	orrs	r3, r1
 8003532:	491b      	ldr	r1, [pc, #108]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fd fbbd 	bl	8000cbc <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003546:	f7fd fbb9 	bl	8000cbc <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e03d      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x46a>
 8003564:	e035      	b.n	80035d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fd fba6 	bl	8000cbc <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003574:	f7fd fba2 	bl	8000cbc <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e026      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x498>
 8003592:	e01e      	b.n	80035d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d107      	bne.n	80035ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e019      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40007000 	.word	0x40007000
 80035a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_RCC_OscConfig+0x500>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000

080035e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0d0      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035f4:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d910      	bls.n	8003624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 0207 	bic.w	r2, r3, #7
 800360a:	4965      	ldr	r1, [pc, #404]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003612:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0b8      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d020      	beq.n	8003672 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800363c:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4a58      	ldr	r2, [pc, #352]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003646:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003654:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a52      	ldr	r2, [pc, #328]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800365e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003660:	4b50      	ldr	r3, [pc, #320]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	494d      	ldr	r1, [pc, #308]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d040      	beq.n	8003700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d115      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e07f      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d107      	bne.n	80036ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369e:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e073      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ae:	4b3d      	ldr	r3, [pc, #244]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e06b      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036be:	4b39      	ldr	r3, [pc, #228]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f023 0203 	bic.w	r2, r3, #3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4936      	ldr	r1, [pc, #216]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d0:	f7fd faf4 	bl	8000cbc <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d8:	f7fd faf0 	bl	8000cbc <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e053      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ee:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 020c 	and.w	r2, r3, #12
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d1eb      	bne.n	80036d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003700:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d210      	bcs.n	8003730 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 0207 	bic.w	r2, r3, #7
 8003716:	4922      	ldr	r1, [pc, #136]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e032      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4916      	ldr	r1, [pc, #88]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	4313      	orrs	r3, r2
 800374c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800375a:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	490e      	ldr	r1, [pc, #56]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800376e:	f000 f821 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8003772:	4602      	mov	r2, r0
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	490a      	ldr	r1, [pc, #40]	; (80037a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003780:	5ccb      	ldrb	r3, [r1, r3]
 8003782:	fa22 f303 	lsr.w	r3, r2, r3
 8003786:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x1cc>)
 8003788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1d0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fd fa52 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40021000 	.word	0x40021000
 80037a8:	0800858c 	.word	0x0800858c
 80037ac:	20000078 	.word	0x20000078
 80037b0:	2000007c 	.word	0x2000007c

080037b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	2300      	movs	r3, #0
 80037c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037ce:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <HAL_RCC_GetSysClockFreq+0x94>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d002      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x30>
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d003      	beq.n	80037ea <HAL_RCC_GetSysClockFreq+0x36>
 80037e2:	e027      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037e4:	4b19      	ldr	r3, [pc, #100]	; (800384c <HAL_RCC_GetSysClockFreq+0x98>)
 80037e6:	613b      	str	r3, [r7, #16]
      break;
 80037e8:	e027      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	0c9b      	lsrs	r3, r3, #18
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	4a17      	ldr	r2, [pc, #92]	; (8003850 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037f4:	5cd3      	ldrb	r3, [r2, r3]
 80037f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d010      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003802:	4b11      	ldr	r3, [pc, #68]	; (8003848 <HAL_RCC_GetSysClockFreq+0x94>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	0c5b      	lsrs	r3, r3, #17
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	4a11      	ldr	r2, [pc, #68]	; (8003854 <HAL_RCC_GetSysClockFreq+0xa0>)
 800380e:	5cd3      	ldrb	r3, [r2, r3]
 8003810:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a0d      	ldr	r2, [pc, #52]	; (800384c <HAL_RCC_GetSysClockFreq+0x98>)
 8003816:	fb03 f202 	mul.w	r2, r3, r2
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	e004      	b.n	800382e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a0c      	ldr	r2, [pc, #48]	; (8003858 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003828:	fb02 f303 	mul.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	613b      	str	r3, [r7, #16]
      break;
 8003832:	e002      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003836:	613b      	str	r3, [r7, #16]
      break;
 8003838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383a:	693b      	ldr	r3, [r7, #16]
}
 800383c:	4618      	mov	r0, r3
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000
 800384c:	00f42400 	.word	0x00f42400
 8003850:	0800859c 	.word	0x0800859c
 8003854:	080085ac 	.word	0x080085ac
 8003858:	003d0900 	.word	0x003d0900
 800385c:	007a1200 	.word	0x007a1200

08003860 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003868:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <RCC_Delay+0x34>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <RCC_Delay+0x38>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0a5b      	lsrs	r3, r3, #9
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	fb02 f303 	mul.w	r3, r2, r3
 800387a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800387c:	bf00      	nop
  }
  while (Delay --);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1e5a      	subs	r2, r3, #1
 8003882:	60fa      	str	r2, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f9      	bne.n	800387c <RCC_Delay+0x1c>
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	20000078 	.word	0x20000078
 8003898:	10624dd3 	.word	0x10624dd3

0800389c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d07d      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80038b8:	2300      	movs	r3, #0
 80038ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038bc:	4b4f      	ldr	r3, [pc, #316]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10d      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c8:	4b4c      	ldr	r3, [pc, #304]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	4a4b      	ldr	r2, [pc, #300]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d2:	61d3      	str	r3, [r2, #28]
 80038d4:	4b49      	ldr	r3, [pc, #292]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e0:	2301      	movs	r3, #1
 80038e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e4:	4b46      	ldr	r3, [pc, #280]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d118      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f0:	4b43      	ldr	r3, [pc, #268]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a42      	ldr	r2, [pc, #264]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fc:	f7fd f9de 	bl	8000cbc <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003902:	e008      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003904:	f7fd f9da 	bl	8000cbc <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	; 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e06d      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003916:	4b3a      	ldr	r3, [pc, #232]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003922:	4b36      	ldr	r3, [pc, #216]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d02e      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	429a      	cmp	r2, r3
 800393e:	d027      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003940:	4b2e      	ldr	r3, [pc, #184]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003948:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800394a:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800394c:	2201      	movs	r2, #1
 800394e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003950:	4b2c      	ldr	r3, [pc, #176]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003956:	4a29      	ldr	r2, [pc, #164]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d014      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003966:	f7fd f9a9 	bl	8000cbc <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396c:	e00a      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396e:	f7fd f9a5 	bl	8000cbc <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	f241 3288 	movw	r2, #5000	; 0x1388
 800397c:	4293      	cmp	r3, r2
 800397e:	d901      	bls.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e036      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003984:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ee      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003990:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4917      	ldr	r1, [pc, #92]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d105      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a8:	4b14      	ldr	r3, [pc, #80]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	4a13      	ldr	r2, [pc, #76]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	490b      	ldr	r1, [pc, #44]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039de:	4b07      	ldr	r3, [pc, #28]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	4904      	ldr	r1, [pc, #16]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40007000 	.word	0x40007000
 8003a04:	42420440 	.word	0x42420440

08003a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e076      	b.n	8003b08 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d108      	bne.n	8003a34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a2a:	d009      	beq.n	8003a40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	61da      	str	r2, [r3, #28]
 8003a32:	e005      	b.n	8003a40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fc ff42 	bl	80008e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac4:	ea42 0103 	orr.w	r1, r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	0c1a      	lsrs	r2, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f002 0204 	and.w	r2, r2, #4
 8003ae6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_SPI_Transmit_DMA+0x20>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e097      	b.n	8003c60 <HAL_SPI_Transmit_DMA+0x150>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d002      	beq.n	8003b4a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
 8003b46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b48:	e085      	b.n	8003c56 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_SPI_Transmit_DMA+0x46>
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b5a:	e07c      	b.n	8003c56 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2203      	movs	r2, #3
 8003b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	88fa      	ldrh	r2, [r7, #6]
 8003b74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	88fa      	ldrh	r2, [r7, #6]
 8003b7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba2:	d10f      	bne.n	8003bc4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc8:	4a27      	ldr	r2, [pc, #156]	; (8003c68 <HAL_SPI_Transmit_DMA+0x158>)
 8003bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd0:	4a26      	ldr	r2, [pc, #152]	; (8003c6c <HAL_SPI_Transmit_DMA+0x15c>)
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd8:	4a25      	ldr	r2, [pc, #148]	; (8003c70 <HAL_SPI_Transmit_DMA+0x160>)
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be0:	2200      	movs	r2, #0
 8003be2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	4619      	mov	r1, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bfa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003bfc:	f7fd f9d0 	bl	8000fa0 <HAL_DMA_Start_IT>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d008      	beq.n	8003c18 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	f043 0210 	orr.w	r2, r3, #16
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003c16:	e01e      	b.n	8003c56 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d007      	beq.n	8003c36 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c34:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0220 	orr.w	r2, r2, #32
 8003c44:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0202 	orr.w	r2, r2, #2
 8003c54:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	08003d51 	.word	0x08003d51
 8003c6c:	08003cab 	.word	0x08003cab
 8003c70:	08003d6d 	.word	0x08003d6d

08003c74 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b086      	sub	sp, #24
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cb8:	f7fd f800 	bl	8000cbc <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d03b      	beq.n	8003d44 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0220 	bic.w	r2, r2, #32
 8003cda:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0202 	bic.w	r2, r2, #2
 8003cea:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	2164      	movs	r1, #100	; 0x64
 8003cf0:	6978      	ldr	r0, [r7, #20]
 8003cf2:	f000 f8e3 	bl	8003ebc <SPI_EndRxTxTransaction>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d00:	f043 0220 	orr.w	r2, r3, #32
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003d3c:	6978      	ldr	r0, [r7, #20]
 8003d3e:	f7ff ffab 	bl	8003c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003d42:	e002      	b.n	8003d4a <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003d44:	6978      	ldr	r0, [r7, #20]
 8003d46:	f7ff ff95 	bl	8003c74 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff ff91 	bl	8003c86 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0203 	bic.w	r2, r2, #3
 8003d88:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	f043 0210 	orr.w	r2, r3, #16
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7ff ff7a 	bl	8003c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dbc:	f7fc ff7e 	bl	8000cbc <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	4413      	add	r3, r2
 8003dca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dcc:	f7fc ff76 	bl	8000cbc <HAL_GetTick>
 8003dd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dd2:	4b39      	ldr	r3, [pc, #228]	; (8003eb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	015b      	lsls	r3, r3, #5
 8003dd8:	0d1b      	lsrs	r3, r3, #20
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	fb02 f303 	mul.w	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003de2:	e054      	b.n	8003e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dea:	d050      	beq.n	8003e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dec:	f7fc ff66 	bl	8000cbc <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d902      	bls.n	8003e02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d13d      	bne.n	8003e7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e1a:	d111      	bne.n	8003e40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e24:	d004      	beq.n	8003e30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2e:	d107      	bne.n	8003e40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e48:	d10f      	bne.n	8003e6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e017      	b.n	8003eae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4013      	ands	r3, r2
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	bf0c      	ite	eq
 8003e9e:	2301      	moveq	r3, #1
 8003ea0:	2300      	movne	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d19b      	bne.n	8003de4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000078 	.word	0x20000078

08003ebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	2180      	movs	r1, #128	; 0x80
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff ff6a 	bl	8003dac <SPI_WaitFlagStateUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	f043 0220 	orr.w	r2, r3, #32
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e000      	b.n	8003ef0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e093      	b.n	8004034 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d106      	bne.n	8003f26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7fc fe11 	bl	8000b48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f3c:	f023 0307 	bic.w	r3, r3, #7
 8003f40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f000 f875 	bl	800403c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	021b      	lsls	r3, r3, #8
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f98:	f023 030c 	bic.w	r3, r3, #12
 8003f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	011a      	lsls	r2, r3, #4
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	031b      	lsls	r3, r3, #12
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003fd6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a29      	ldr	r2, [pc, #164]	; (80040f4 <TIM_Base_SetConfig+0xb8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00b      	beq.n	800406c <TIM_Base_SetConfig+0x30>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405a:	d007      	beq.n	800406c <TIM_Base_SetConfig+0x30>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <TIM_Base_SetConfig+0xbc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_Base_SetConfig+0x30>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a25      	ldr	r2, [pc, #148]	; (80040fc <TIM_Base_SetConfig+0xc0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d108      	bne.n	800407e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <TIM_Base_SetConfig+0xb8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00b      	beq.n	800409e <TIM_Base_SetConfig+0x62>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408c:	d007      	beq.n	800409e <TIM_Base_SetConfig+0x62>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <TIM_Base_SetConfig+0xbc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d003      	beq.n	800409e <TIM_Base_SetConfig+0x62>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a18      	ldr	r2, [pc, #96]	; (80040fc <TIM_Base_SetConfig+0xc0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d108      	bne.n	80040b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a07      	ldr	r2, [pc, #28]	; (80040f4 <TIM_Base_SetConfig+0xb8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d103      	bne.n	80040e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	615a      	str	r2, [r3, #20]
}
 80040ea:	bf00      	nop
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800

08004100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004114:	2302      	movs	r3, #2
 8004116:	e046      	b.n	80041a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d009      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a10      	ldr	r2, [pc, #64]	; (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10c      	bne.n	8004194 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	4313      	orrs	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr
 80041b0:	40012c00 	.word	0x40012c00
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800

080041bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041bc:	b084      	sub	sp, #16
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	f107 0014 	add.w	r0, r7, #20
 80041ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	b004      	add	sp, #16
 80041da:	4770      	bx	lr

080041dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr

08004208 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004210:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004214:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	b29b      	uxth	r3, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	b29b      	uxth	r3, r3
 8004226:	4013      	ands	r3, r2
 8004228:	b29a      	uxth	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004254:	b084      	sub	sp, #16
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	f107 0014 	add.w	r0, r7, #20
 8004262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	b004      	add	sp, #16
 8004292:	4770      	bx	lr

08004294 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004294:	b480      	push	{r7}
 8004296:	b09d      	sub	sp, #116	; 0x74
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80042b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	78db      	ldrb	r3, [r3, #3]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d81f      	bhi.n	8004306 <USB_ActivateEndpoint+0x72>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <USB_ActivateEndpoint+0x38>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	080042dd 	.word	0x080042dd
 80042d0:	080042f9 	.word	0x080042f9
 80042d4:	0800430f 	.word	0x0800430f
 80042d8:	080042eb 	.word	0x080042eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80042dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80042e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80042e8:	e012      	b.n	8004310 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80042ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80042ee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80042f2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80042f6:	e00b      	b.n	8004310 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80042f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80042fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004300:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004304:	e004      	b.n	8004310 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800430c:	e000      	b.n	8004310 <USB_ActivateEndpoint+0x7c>
      break;
 800430e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	441a      	add	r2, r3
 800431a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800431e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800432a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432e:	b29b      	uxth	r3, r3
 8004330:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29b      	uxth	r3, r3
 8004340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004348:	b29a      	uxth	r2, r3
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	4313      	orrs	r3, r2
 8004352:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	441a      	add	r2, r3
 8004360:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800436c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004374:	b29b      	uxth	r3, r3
 8004376:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	7b1b      	ldrb	r3, [r3, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f040 8178 	bne.w	8004672 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	785b      	ldrb	r3, [r3, #1]
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 8084 	beq.w	8004494 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	61bb      	str	r3, [r7, #24]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004396:	b29b      	uxth	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	4413      	add	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	011a      	lsls	r2, r3, #4
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	88db      	ldrh	r3, [r3, #6]
 80043b4:	085b      	lsrs	r3, r3, #1
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	827b      	strh	r3, [r7, #18]
 80043ce:	8a7b      	ldrh	r3, [r7, #18]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01b      	beq.n	8004410 <USB_ActivateEndpoint+0x17c>
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	823b      	strh	r3, [r7, #16]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	8a3b      	ldrh	r3, [r7, #16]
 80043fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004408:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800440c:	b29b      	uxth	r3, r3
 800440e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	78db      	ldrb	r3, [r3, #3]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d020      	beq.n	800445a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800442e:	81bb      	strh	r3, [r7, #12]
 8004430:	89bb      	ldrh	r3, [r7, #12]
 8004432:	f083 0320 	eor.w	r3, r3, #32
 8004436:	81bb      	strh	r3, [r7, #12]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	441a      	add	r2, r3
 8004442:	89bb      	ldrh	r3, [r7, #12]
 8004444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800444c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004454:	b29b      	uxth	r3, r3
 8004456:	8013      	strh	r3, [r2, #0]
 8004458:	e2d5      	b.n	8004a06 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004470:	81fb      	strh	r3, [r7, #14]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	441a      	add	r2, r3
 800447c:	89fb      	ldrh	r3, [r7, #14]
 800447e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800448a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448e:	b29b      	uxth	r3, r3
 8004490:	8013      	strh	r3, [r2, #0]
 8004492:	e2b8      	b.n	8004a06 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	633b      	str	r3, [r7, #48]	; 0x30
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800449e:	b29b      	uxth	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	4413      	add	r3, r2
 80044a6:	633b      	str	r3, [r7, #48]	; 0x30
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	011a      	lsls	r2, r3, #4
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	88db      	ldrh	r3, [r3, #6]
 80044bc:	085b      	lsrs	r3, r3, #1
 80044be:	b29b      	uxth	r3, r3
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	4413      	add	r3, r2
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	011a      	lsls	r2, r3, #4
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	4413      	add	r3, r2
 80044e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	801a      	strh	r2, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b3e      	cmp	r3, #62	; 0x3e
 8004502:	d91d      	bls.n	8004540 <USB_ActivateEndpoint+0x2ac>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	66bb      	str	r3, [r7, #104]	; 0x68
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2b00      	cmp	r3, #0
 8004516:	d102      	bne.n	800451e <USB_ActivateEndpoint+0x28a>
 8004518:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800451a:	3b01      	subs	r3, #1
 800451c:	66bb      	str	r3, [r7, #104]	; 0x68
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29a      	uxth	r2, r3
 8004524:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004526:	b29b      	uxth	r3, r3
 8004528:	029b      	lsls	r3, r3, #10
 800452a:	b29b      	uxth	r3, r3
 800452c:	4313      	orrs	r3, r2
 800452e:	b29b      	uxth	r3, r3
 8004530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004538:	b29a      	uxth	r2, r3
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	801a      	strh	r2, [r3, #0]
 800453e:	e026      	b.n	800458e <USB_ActivateEndpoint+0x2fa>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <USB_ActivateEndpoint+0x2ca>
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004556:	b29a      	uxth	r2, r3
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	801a      	strh	r2, [r3, #0]
 800455c:	e017      	b.n	800458e <USB_ActivateEndpoint+0x2fa>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	66bb      	str	r3, [r7, #104]	; 0x68
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <USB_ActivateEndpoint+0x2e4>
 8004572:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004574:	3301      	adds	r3, #1
 8004576:	66bb      	str	r3, [r7, #104]	; 0x68
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b29a      	uxth	r2, r3
 800457e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004580:	b29b      	uxth	r3, r3
 8004582:	029b      	lsls	r3, r3, #10
 8004584:	b29b      	uxth	r3, r3
 8004586:	4313      	orrs	r3, r2
 8004588:	b29a      	uxth	r2, r3
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	847b      	strh	r3, [r7, #34]	; 0x22
 800459c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800459e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01b      	beq.n	80045de <USB_ActivateEndpoint+0x34a>
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045bc:	843b      	strh	r3, [r7, #32]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	8c3b      	ldrh	r3, [r7, #32]
 80045ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d124      	bne.n	8004630 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fc:	83bb      	strh	r3, [r7, #28]
 80045fe:	8bbb      	ldrh	r3, [r7, #28]
 8004600:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004604:	83bb      	strh	r3, [r7, #28]
 8004606:	8bbb      	ldrh	r3, [r7, #28]
 8004608:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800460c:	83bb      	strh	r3, [r7, #28]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	441a      	add	r2, r3
 8004618:	8bbb      	ldrh	r3, [r7, #28]
 800461a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462a:	b29b      	uxth	r3, r3
 800462c:	8013      	strh	r3, [r2, #0]
 800462e:	e1ea      	b.n	8004a06 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	83fb      	strh	r3, [r7, #30]
 8004648:	8bfb      	ldrh	r3, [r7, #30]
 800464a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800464e:	83fb      	strh	r3, [r7, #30]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	441a      	add	r2, r3
 800465a:	8bfb      	ldrh	r3, [r7, #30]
 800465c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466c:	b29b      	uxth	r3, r3
 800466e:	8013      	strh	r3, [r2, #0]
 8004670:	e1c9      	b.n	8004a06 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	78db      	ldrb	r3, [r3, #3]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d11e      	bne.n	80046b8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004690:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80046a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046aa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80046ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	8013      	strh	r3, [r2, #0]
 80046b6:	e01d      	b.n	80046f4 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	441a      	add	r2, r3
 80046dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fe:	b29b      	uxth	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004704:	4413      	add	r3, r2
 8004706:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	011a      	lsls	r2, r3, #4
 800470e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004710:	4413      	add	r3, r2
 8004712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004716:	65bb      	str	r3, [r7, #88]	; 0x58
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	891b      	ldrh	r3, [r3, #8]
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	b29b      	uxth	r3, r3
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004726:	801a      	strh	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	657b      	str	r3, [r7, #84]	; 0x54
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004732:	b29b      	uxth	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004738:	4413      	add	r3, r2
 800473a:	657b      	str	r3, [r7, #84]	; 0x54
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	011a      	lsls	r2, r3, #4
 8004742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004744:	4413      	add	r3, r2
 8004746:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800474a:	653b      	str	r3, [r7, #80]	; 0x50
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	895b      	ldrh	r3, [r3, #10]
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	b29b      	uxth	r3, r3
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800475a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	785b      	ldrb	r3, [r3, #1]
 8004760:	2b00      	cmp	r3, #0
 8004762:	f040 8093 	bne.w	800488c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004776:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800477a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d01b      	beq.n	80047ba <USB_ActivateEndpoint+0x526>
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004798:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	441a      	add	r2, r3
 80047a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80047c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80047ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d01b      	beq.n	800480a <USB_ActivateEndpoint+0x576>
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	441a      	add	r2, r3
 80047f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80047f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004802:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004806:	b29b      	uxth	r3, r3
 8004808:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
 8004818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800481c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004820:	873b      	strh	r3, [r7, #56]	; 0x38
 8004822:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004824:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004828:	873b      	strh	r3, [r7, #56]	; 0x38
 800482a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800482c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004830:	873b      	strh	r3, [r7, #56]	; 0x38
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	441a      	add	r2, r3
 800483c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800483e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484e:	b29b      	uxth	r3, r3
 8004850:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004868:	86fb      	strh	r3, [r7, #54]	; 0x36
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	441a      	add	r2, r3
 8004874:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800487a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800487e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004886:	b29b      	uxth	r3, r3
 8004888:	8013      	strh	r3, [r2, #0]
 800488a:	e0bc      	b.n	8004a06 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800489c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01d      	beq.n	80048e4 <USB_ActivateEndpoint+0x650>
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	441a      	add	r2, r3
 80048cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80048d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80048f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01d      	beq.n	800493c <USB_ActivateEndpoint+0x6a8>
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	b29b      	uxth	r3, r3
 800490e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004916:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	441a      	add	r2, r3
 8004924:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800492c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004934:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004938:	b29b      	uxth	r3, r3
 800493a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	78db      	ldrb	r3, [r3, #3]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d024      	beq.n	800498e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	b29b      	uxth	r3, r3
 8004952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800495e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004962:	f083 0320 	eor.w	r3, r3, #32
 8004966:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	441a      	add	r2, r3
 8004974:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800497c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004988:	b29b      	uxth	r3, r3
 800498a:	8013      	strh	r3, [r2, #0]
 800498c:	e01d      	b.n	80049ca <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	441a      	add	r2, r3
 80049b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	441a      	add	r2, r3
 80049ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80049f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004a06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3774      	adds	r7, #116	; 0x74
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b08d      	sub	sp, #52	; 0x34
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	7b1b      	ldrb	r3, [r3, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f040 808e 	bne.w	8004b44 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d044      	beq.n	8004aba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	81bb      	strh	r3, [r7, #12]
 8004a3e:	89bb      	ldrh	r3, [r7, #12]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01b      	beq.n	8004a80 <USB_DeactivateEndpoint+0x6c>
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5e:	817b      	strh	r3, [r7, #10]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	441a      	add	r2, r3
 8004a6a:	897b      	ldrh	r3, [r7, #10]
 8004a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a96:	813b      	strh	r3, [r7, #8]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	893b      	ldrh	r3, [r7, #8]
 8004aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	8013      	strh	r3, [r2, #0]
 8004ab8:	e192      	b.n	8004de0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	827b      	strh	r3, [r7, #18]
 8004ac8:	8a7b      	ldrh	r3, [r7, #18]
 8004aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d01b      	beq.n	8004b0a <USB_DeactivateEndpoint+0xf6>
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae8:	823b      	strh	r3, [r7, #16]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	441a      	add	r2, r3
 8004af4:	8a3b      	ldrh	r3, [r7, #16]
 8004af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b20:	81fb      	strh	r3, [r7, #14]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	441a      	add	r2, r3
 8004b2c:	89fb      	ldrh	r3, [r7, #14]
 8004b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8013      	strh	r3, [r2, #0]
 8004b42:	e14d      	b.n	8004de0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	785b      	ldrb	r3, [r3, #1]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f040 80a5 	bne.w	8004c98 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	843b      	strh	r3, [r7, #32]
 8004b5c:	8c3b      	ldrh	r3, [r7, #32]
 8004b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01b      	beq.n	8004b9e <USB_DeactivateEndpoint+0x18a>
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7c:	83fb      	strh	r3, [r7, #30]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	8bfb      	ldrh	r3, [r7, #30]
 8004b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	83bb      	strh	r3, [r7, #28]
 8004bac:	8bbb      	ldrh	r3, [r7, #28]
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01b      	beq.n	8004bee <USB_DeactivateEndpoint+0x1da>
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bcc:	837b      	strh	r3, [r7, #26]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	441a      	add	r2, r3
 8004bd8:	8b7b      	ldrh	r3, [r7, #26]
 8004bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c04:	833b      	strh	r3, [r7, #24]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	441a      	add	r2, r3
 8004c10:	8b3b      	ldrh	r3, [r7, #24]
 8004c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3c:	82fb      	strh	r3, [r7, #22]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	441a      	add	r2, r3
 8004c48:	8afb      	ldrh	r3, [r7, #22]
 8004c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c74:	82bb      	strh	r3, [r7, #20]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	441a      	add	r2, r3
 8004c80:	8abb      	ldrh	r3, [r7, #20]
 8004c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	8013      	strh	r3, [r2, #0]
 8004c96:	e0a3      	b.n	8004de0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ca6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01b      	beq.n	8004ce8 <USB_DeactivateEndpoint+0x2d4>
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	441a      	add	r2, r3
 8004cd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004cf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01b      	beq.n	8004d38 <USB_DeactivateEndpoint+0x324>
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d16:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	441a      	add	r2, r3
 8004d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbe:	847b      	strh	r3, [r7, #34]	; 0x22
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	441a      	add	r2, r3
 8004dca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3734      	adds	r7, #52	; 0x34
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr

08004dec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b0c2      	sub	sp, #264	; 0x108
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004df6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dfa:	6018      	str	r0, [r3, #0]
 8004dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e04:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	785b      	ldrb	r3, [r3, #1]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	f040 86b7 	bne.w	8005b86 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699a      	ldr	r2, [r3, #24]
 8004e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d908      	bls.n	8004e46 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e44:	e007      	b.n	8004e56 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	7b1b      	ldrb	r3, [r3, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d13a      	bne.n	8004edc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6959      	ldr	r1, [r3, #20]
 8004e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	88da      	ldrh	r2, [r3, #6]
 8004e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004e88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004e8c:	6800      	ldr	r0, [r0, #0]
 8004e8e:	f001 fc9c 	bl	80067ca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	011a      	lsls	r2, r3, #4
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	f000 be1f 	b.w	8005b1a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	78db      	ldrb	r3, [r3, #3]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	f040 8462 	bne.w	80057b2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6a1a      	ldr	r2, [r3, #32]
 8004efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	f240 83df 	bls.w	80056ca <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f32:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	441a      	add	r2, r3
 8004f50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6a1a      	ldr	r2, [r3, #32]
 8004f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f78:	1ad2      	subs	r2, r2, r3
 8004f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 81c7 	beq.w	800533c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8004fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	785b      	ldrb	r3, [r3, #1]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d177      	bne.n	80050ba <USB_EPStartXfer+0x2ce>
 8004fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fea:	4413      	add	r3, r2
 8004fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	011a      	lsls	r2, r3, #4
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	4413      	add	r3, r2
 8005000:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29b      	uxth	r3, r3
 800500c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005010:	b29a      	uxth	r2, r3
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	801a      	strh	r2, [r3, #0]
 8005016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800501a:	2b3e      	cmp	r3, #62	; 0x3e
 800501c:	d921      	bls.n	8005062 <USB_EPStartXfer+0x276>
 800501e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	2b00      	cmp	r3, #0
 8005032:	d104      	bne.n	800503e <USB_EPStartXfer+0x252>
 8005034:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005038:	3b01      	subs	r3, #1
 800503a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29a      	uxth	r2, r3
 8005044:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005048:	b29b      	uxth	r3, r3
 800504a:	029b      	lsls	r3, r3, #10
 800504c:	b29b      	uxth	r3, r3
 800504e:	4313      	orrs	r3, r2
 8005050:	b29b      	uxth	r3, r3
 8005052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800505a:	b29a      	uxth	r2, r3
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	e050      	b.n	8005104 <USB_EPStartXfer+0x318>
 8005062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10a      	bne.n	8005080 <USB_EPStartXfer+0x294>
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005078:	b29a      	uxth	r2, r3
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	801a      	strh	r2, [r3, #0]
 800507e:	e041      	b.n	8005104 <USB_EPStartXfer+0x318>
 8005080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005084:	085b      	lsrs	r3, r3, #1
 8005086:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800508a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d004      	beq.n	80050a0 <USB_EPStartXfer+0x2b4>
 8005096:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800509a:	3301      	adds	r3, #1
 800509c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	029b      	lsls	r3, r3, #10
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	4313      	orrs	r3, r2
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	e024      	b.n	8005104 <USB_EPStartXfer+0x318>
 80050ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d11c      	bne.n	8005104 <USB_EPStartXfer+0x318>
 80050ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d8:	b29b      	uxth	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	4413      	add	r3, r2
 80050e0:	633b      	str	r3, [r7, #48]	; 0x30
 80050e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	011a      	lsls	r2, r3, #4
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	4413      	add	r3, r2
 80050f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fe:	b29a      	uxth	r2, r3
 8005100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005102:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	895b      	ldrh	r3, [r3, #10]
 8005110:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6959      	ldr	r1, [r3, #20]
 8005120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005124:	b29b      	uxth	r3, r3
 8005126:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800512a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800512e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005132:	6800      	ldr	r0, [r0, #0]
 8005134:	f001 fb49 	bl	80067ca <USB_WritePMA>
            ep->xfer_buff += len;
 8005138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005148:	441a      	add	r2, r3
 800514a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6a1a      	ldr	r2, [r3, #32]
 8005162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	429a      	cmp	r2, r3
 8005170:	d90f      	bls.n	8005192 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6a1a      	ldr	r2, [r3, #32]
 800517e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005182:	1ad2      	subs	r2, r2, r3
 8005184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	621a      	str	r2, [r3, #32]
 8005190:	e00e      	b.n	80051b0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80051a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2200      	movs	r2, #0
 80051ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d177      	bne.n	80052b0 <USB_EPStartXfer+0x4c4>
 80051c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051da:	b29b      	uxth	r3, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	4413      	add	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	011a      	lsls	r2, r3, #4
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	4413      	add	r3, r2
 80051f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005206:	b29a      	uxth	r2, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005210:	2b3e      	cmp	r3, #62	; 0x3e
 8005212:	d921      	bls.n	8005258 <USB_EPStartXfer+0x46c>
 8005214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005218:	095b      	lsrs	r3, r3, #5
 800521a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800521e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	2b00      	cmp	r3, #0
 8005228:	d104      	bne.n	8005234 <USB_EPStartXfer+0x448>
 800522a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800522e:	3b01      	subs	r3, #1
 8005230:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29a      	uxth	r2, r3
 800523a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800523e:	b29b      	uxth	r3, r3
 8005240:	029b      	lsls	r3, r3, #10
 8005242:	b29b      	uxth	r3, r3
 8005244:	4313      	orrs	r3, r2
 8005246:	b29b      	uxth	r3, r3
 8005248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005250:	b29a      	uxth	r2, r3
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	e056      	b.n	8005306 <USB_EPStartXfer+0x51a>
 8005258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10a      	bne.n	8005276 <USB_EPStartXfer+0x48a>
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800526a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800526e:	b29a      	uxth	r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	801a      	strh	r2, [r3, #0]
 8005274:	e047      	b.n	8005306 <USB_EPStartXfer+0x51a>
 8005276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527a:	085b      	lsrs	r3, r3, #1
 800527c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d004      	beq.n	8005296 <USB_EPStartXfer+0x4aa>
 800528c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005290:	3301      	adds	r3, #1
 8005292:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29a      	uxth	r2, r3
 800529c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	029b      	lsls	r3, r3, #10
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	4313      	orrs	r3, r2
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	e02a      	b.n	8005306 <USB_EPStartXfer+0x51a>
 80052b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d122      	bne.n	8005306 <USB_EPStartXfer+0x51a>
 80052c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	623b      	str	r3, [r7, #32]
 80052cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052da:	b29b      	uxth	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	4413      	add	r3, r2
 80052e2:	623b      	str	r3, [r7, #32]
 80052e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	011a      	lsls	r2, r3, #4
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	4413      	add	r3, r2
 80052f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005300:	b29a      	uxth	r2, r3
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800530a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	891b      	ldrh	r3, [r3, #8]
 8005312:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6959      	ldr	r1, [r3, #20]
 8005322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005326:	b29b      	uxth	r3, r3
 8005328:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800532c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005330:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005334:	6800      	ldr	r0, [r0, #0]
 8005336:	f001 fa48 	bl	80067ca <USB_WritePMA>
 800533a:	e3ee      	b.n	8005b1a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800533c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d177      	bne.n	800543c <USB_EPStartXfer+0x650>
 800534c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005350:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	64bb      	str	r3, [r7, #72]	; 0x48
 8005358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800535c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005366:	b29b      	uxth	r3, r3
 8005368:	461a      	mov	r2, r3
 800536a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800536c:	4413      	add	r3, r2
 800536e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	011a      	lsls	r2, r3, #4
 800537e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005380:	4413      	add	r3, r2
 8005382:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005386:	647b      	str	r3, [r7, #68]	; 0x44
 8005388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005392:	b29a      	uxth	r2, r3
 8005394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539c:	2b3e      	cmp	r3, #62	; 0x3e
 800539e:	d921      	bls.n	80053e4 <USB_EPStartXfer+0x5f8>
 80053a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a4:	095b      	lsrs	r3, r3, #5
 80053a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ae:	f003 031f 	and.w	r3, r3, #31
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d104      	bne.n	80053c0 <USB_EPStartXfer+0x5d4>
 80053b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053ba:	3b01      	subs	r3, #1
 80053bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	029b      	lsls	r3, r3, #10
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	4313      	orrs	r3, r2
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053dc:	b29a      	uxth	r2, r3
 80053de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e0:	801a      	strh	r2, [r3, #0]
 80053e2:	e056      	b.n	8005492 <USB_EPStartXfer+0x6a6>
 80053e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <USB_EPStartXfer+0x616>
 80053ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fe:	801a      	strh	r2, [r3, #0]
 8005400:	e047      	b.n	8005492 <USB_EPStartXfer+0x6a6>
 8005402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005406:	085b      	lsrs	r3, r3, #1
 8005408:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800540c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <USB_EPStartXfer+0x636>
 8005418:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800541c:	3301      	adds	r3, #1
 800541e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29a      	uxth	r2, r3
 8005428:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800542c:	b29b      	uxth	r3, r3
 800542e:	029b      	lsls	r3, r3, #10
 8005430:	b29b      	uxth	r3, r3
 8005432:	4313      	orrs	r3, r2
 8005434:	b29a      	uxth	r2, r3
 8005436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	e02a      	b.n	8005492 <USB_EPStartXfer+0x6a6>
 800543c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d122      	bne.n	8005492 <USB_EPStartXfer+0x6a6>
 800544c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005450:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	653b      	str	r3, [r7, #80]	; 0x50
 8005458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800545c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005466:	b29b      	uxth	r3, r3
 8005468:	461a      	mov	r2, r3
 800546a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800546c:	4413      	add	r3, r2
 800546e:	653b      	str	r3, [r7, #80]	; 0x50
 8005470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	011a      	lsls	r2, r3, #4
 800547e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005480:	4413      	add	r3, r2
 8005482:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800548c:	b29a      	uxth	r2, r3
 800548e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005490:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	891b      	ldrh	r3, [r3, #8]
 800549e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6959      	ldr	r1, [r3, #20]
 80054ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80054b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80054bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80054c0:	6800      	ldr	r0, [r0, #0]
 80054c2:	f001 f982 	bl	80067ca <USB_WritePMA>
            ep->xfer_buff += len;
 80054c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695a      	ldr	r2, [r3, #20]
 80054d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054d6:	441a      	add	r2, r3
 80054d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d90f      	bls.n	8005520 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6a1a      	ldr	r2, [r3, #32]
 800550c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005510:	1ad2      	subs	r2, r2, r3
 8005512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	621a      	str	r2, [r3, #32]
 800551e:	e00e      	b.n	800553e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2200      	movs	r2, #0
 800553c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800553e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005542:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	643b      	str	r3, [r7, #64]	; 0x40
 800554a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800554e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	785b      	ldrb	r3, [r3, #1]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d177      	bne.n	800564a <USB_EPStartXfer+0x85e>
 800555a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	63bb      	str	r3, [r7, #56]	; 0x38
 8005566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005574:	b29b      	uxth	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	4413      	add	r3, r2
 800557c:	63bb      	str	r3, [r7, #56]	; 0x38
 800557e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	011a      	lsls	r2, r3, #4
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	4413      	add	r3, r2
 8005590:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005594:	637b      	str	r3, [r7, #52]	; 0x34
 8005596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	b29b      	uxth	r3, r3
 800559c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055aa:	2b3e      	cmp	r3, #62	; 0x3e
 80055ac:	d921      	bls.n	80055f2 <USB_EPStartXfer+0x806>
 80055ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055bc:	f003 031f 	and.w	r3, r3, #31
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <USB_EPStartXfer+0x7e2>
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	3b01      	subs	r3, #1
 80055ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d8:	b29b      	uxth	r3, r3
 80055da:	029b      	lsls	r3, r3, #10
 80055dc:	b29b      	uxth	r3, r3
 80055de:	4313      	orrs	r3, r2
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ee:	801a      	strh	r2, [r3, #0]
 80055f0:	e050      	b.n	8005694 <USB_EPStartXfer+0x8a8>
 80055f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <USB_EPStartXfer+0x824>
 80055fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005608:	b29a      	uxth	r2, r3
 800560a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560c:	801a      	strh	r2, [r3, #0]
 800560e:	e041      	b.n	8005694 <USB_EPStartXfer+0x8a8>
 8005610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005614:	085b      	lsrs	r3, r3, #1
 8005616:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800561a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d004      	beq.n	8005630 <USB_EPStartXfer+0x844>
 8005626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562a:	3301      	adds	r3, #1
 800562c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29a      	uxth	r2, r3
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563a:	b29b      	uxth	r3, r3
 800563c:	029b      	lsls	r3, r3, #10
 800563e:	b29b      	uxth	r3, r3
 8005640:	4313      	orrs	r3, r2
 8005642:	b29a      	uxth	r2, r3
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	e024      	b.n	8005694 <USB_EPStartXfer+0x8a8>
 800564a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	785b      	ldrb	r3, [r3, #1]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d11c      	bne.n	8005694 <USB_EPStartXfer+0x8a8>
 800565a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800565e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005668:	b29b      	uxth	r3, r3
 800566a:	461a      	mov	r2, r3
 800566c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566e:	4413      	add	r3, r2
 8005670:	643b      	str	r3, [r7, #64]	; 0x40
 8005672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	011a      	lsls	r2, r3, #4
 8005680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005682:	4413      	add	r3, r2
 8005684:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568e:	b29a      	uxth	r2, r3
 8005690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005692:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	895b      	ldrh	r3, [r3, #10]
 80056a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6959      	ldr	r1, [r3, #20]
 80056b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80056ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80056be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80056c2:	6800      	ldr	r0, [r0, #0]
 80056c4:	f001 f881 	bl	80067ca <USB_WritePMA>
 80056c8:	e227      	b.n	8005b1a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80056ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80056da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80056fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005700:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	441a      	add	r2, r3
 800571e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005732:	b29b      	uxth	r3, r3
 8005734:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005750:	b29b      	uxth	r3, r3
 8005752:	461a      	mov	r2, r3
 8005754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005756:	4413      	add	r3, r2
 8005758:	65fb      	str	r3, [r7, #92]	; 0x5c
 800575a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	011a      	lsls	r2, r3, #4
 8005768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800576a:	4413      	add	r3, r2
 800576c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005770:	65bb      	str	r3, [r7, #88]	; 0x58
 8005772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005776:	b29a      	uxth	r2, r3
 8005778:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800577a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800577c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	891b      	ldrh	r3, [r3, #8]
 8005788:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800578c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6959      	ldr	r1, [r3, #20]
 8005798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579c:	b29b      	uxth	r3, r3
 800579e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80057a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80057aa:	6800      	ldr	r0, [r0, #0]
 80057ac:	f001 f80d 	bl	80067ca <USB_WritePMA>
 80057b0:	e1b3      	b.n	8005b1a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80057b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6a1a      	ldr	r2, [r3, #32]
 80057be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c2:	1ad2      	subs	r2, r2, r3
 80057c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 80c6 	beq.w	8005984 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	673b      	str	r3, [r7, #112]	; 0x70
 8005804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	785b      	ldrb	r3, [r3, #1]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d177      	bne.n	8005904 <USB_EPStartXfer+0xb18>
 8005814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005818:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800582e:	b29b      	uxth	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005834:	4413      	add	r3, r2
 8005836:	66bb      	str	r3, [r7, #104]	; 0x68
 8005838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	011a      	lsls	r2, r3, #4
 8005846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005848:	4413      	add	r3, r2
 800584a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800584e:	667b      	str	r3, [r7, #100]	; 0x64
 8005850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800585a:	b29a      	uxth	r2, r3
 800585c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005864:	2b3e      	cmp	r3, #62	; 0x3e
 8005866:	d921      	bls.n	80058ac <USB_EPStartXfer+0xac0>
 8005868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800586c:	095b      	lsrs	r3, r3, #5
 800586e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	2b00      	cmp	r3, #0
 800587c:	d104      	bne.n	8005888 <USB_EPStartXfer+0xa9c>
 800587e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005882:	3b01      	subs	r3, #1
 8005884:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b29a      	uxth	r2, r3
 800588e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005892:	b29b      	uxth	r3, r3
 8005894:	029b      	lsls	r3, r3, #10
 8005896:	b29b      	uxth	r3, r3
 8005898:	4313      	orrs	r3, r2
 800589a:	b29b      	uxth	r3, r3
 800589c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	e050      	b.n	800594e <USB_EPStartXfer+0xb62>
 80058ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10a      	bne.n	80058ca <USB_EPStartXfer+0xade>
 80058b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058c6:	801a      	strh	r2, [r3, #0]
 80058c8:	e041      	b.n	800594e <USB_EPStartXfer+0xb62>
 80058ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d004      	beq.n	80058ea <USB_EPStartXfer+0xafe>
 80058e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058e4:	3301      	adds	r3, #1
 80058e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	029b      	lsls	r3, r3, #10
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	4313      	orrs	r3, r2
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e024      	b.n	800594e <USB_EPStartXfer+0xb62>
 8005904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	785b      	ldrb	r3, [r3, #1]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d11c      	bne.n	800594e <USB_EPStartXfer+0xb62>
 8005914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005918:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005922:	b29b      	uxth	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005928:	4413      	add	r3, r2
 800592a:	673b      	str	r3, [r7, #112]	; 0x70
 800592c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	011a      	lsls	r2, r3, #4
 800593a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800593c:	4413      	add	r3, r2
 800593e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005942:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005948:	b29a      	uxth	r2, r3
 800594a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800594e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	895b      	ldrh	r3, [r3, #10]
 800595a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800595e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6959      	ldr	r1, [r3, #20]
 800596a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800596e:	b29b      	uxth	r3, r3
 8005970:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005974:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005978:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800597c:	6800      	ldr	r0, [r0, #0]
 800597e:	f000 ff24 	bl	80067ca <USB_WritePMA>
 8005982:	e0ca      	b.n	8005b1a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d177      	bne.n	8005a84 <USB_EPStartXfer+0xc98>
 8005994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	461a      	mov	r2, r3
 80059b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059b4:	4413      	add	r3, r2
 80059b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	011a      	lsls	r2, r3, #4
 80059c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059c8:	4413      	add	r3, r2
 80059ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80059d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059da:	b29a      	uxth	r2, r3
 80059dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059de:	801a      	strh	r2, [r3, #0]
 80059e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e4:	2b3e      	cmp	r3, #62	; 0x3e
 80059e6:	d921      	bls.n	8005a2c <USB_EPStartXfer+0xc40>
 80059e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d104      	bne.n	8005a08 <USB_EPStartXfer+0xc1c>
 80059fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a02:	3b01      	subs	r3, #1
 8005a04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	029b      	lsls	r3, r3, #10
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e05c      	b.n	8005ae6 <USB_EPStartXfer+0xcfa>
 8005a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <USB_EPStartXfer+0xc5e>
 8005a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a46:	801a      	strh	r2, [r3, #0]
 8005a48:	e04d      	b.n	8005ae6 <USB_EPStartXfer+0xcfa>
 8005a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a4e:	085b      	lsrs	r3, r3, #1
 8005a50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <USB_EPStartXfer+0xc7e>
 8005a60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a64:	3301      	adds	r3, #1
 8005a66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	029b      	lsls	r3, r3, #10
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	e030      	b.n	8005ae6 <USB_EPStartXfer+0xcfa>
 8005a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d128      	bne.n	8005ae6 <USB_EPStartXfer+0xcfa>
 8005a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ab8:	4413      	add	r3, r2
 8005aba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	011a      	lsls	r2, r3, #4
 8005acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ad6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ae4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	891b      	ldrh	r3, [r3, #8]
 8005af2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6959      	ldr	r1, [r3, #20]
 8005b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b0c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b10:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b14:	6800      	ldr	r0, [r0, #0]
 8005b16:	f000 fe58 	bl	80067ca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b40:	817b      	strh	r3, [r7, #10]
 8005b42:	897b      	ldrh	r3, [r7, #10]
 8005b44:	f083 0310 	eor.w	r3, r3, #16
 8005b48:	817b      	strh	r3, [r7, #10]
 8005b4a:	897b      	ldrh	r3, [r7, #10]
 8005b4c:	f083 0320 	eor.w	r3, r3, #32
 8005b50:	817b      	strh	r3, [r7, #10]
 8005b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	441a      	add	r2, r3
 8005b6c:	897b      	ldrh	r3, [r7, #10]
 8005b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	8013      	strh	r3, [r2, #0]
 8005b82:	f000 bcde 	b.w	8006542 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	7b1b      	ldrb	r3, [r3, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f040 80bb 	bne.w	8005d0e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699a      	ldr	r2, [r3, #24]
 8005ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d917      	bls.n	8005be4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699a      	ldr	r2, [r3, #24]
 8005bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd4:	1ad2      	subs	r2, r2, r3
 8005bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	619a      	str	r2, [r3, #24]
 8005be2:	e00e      	b.n	8005c02 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c26:	4413      	add	r3, r2
 8005c28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	011a      	lsls	r2, r3, #4
 8005c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c3e:	4413      	add	r3, r2
 8005c40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c60:	2b3e      	cmp	r3, #62	; 0x3e
 8005c62:	d924      	bls.n	8005cae <USB_EPStartXfer+0xec2>
 8005c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c72:	f003 031f 	and.w	r3, r3, #31
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d104      	bne.n	8005c84 <USB_EPStartXfer+0xe98>
 8005c7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	029b      	lsls	r3, r3, #10
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	4313      	orrs	r3, r2
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	f000 bc10 	b.w	80064ce <USB_EPStartXfer+0x16e2>
 8005cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10c      	bne.n	8005cd0 <USB_EPStartXfer+0xee4>
 8005cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ccc:	801a      	strh	r2, [r3, #0]
 8005cce:	e3fe      	b.n	80064ce <USB_EPStartXfer+0x16e2>
 8005cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <USB_EPStartXfer+0xf04>
 8005ce6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cea:	3301      	adds	r3, #1
 8005cec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	029b      	lsls	r3, r3, #10
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	4313      	orrs	r3, r2
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d0a:	801a      	strh	r2, [r3, #0]
 8005d0c:	e3df      	b.n	80064ce <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	78db      	ldrb	r3, [r3, #3]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	f040 8218 	bne.w	8006150 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f040 809d 	bne.w	8005e6c <USB_EPStartXfer+0x1080>
 8005d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d56:	4413      	add	r3, r2
 8005d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	011a      	lsls	r2, r3, #4
 8005d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d6e:	4413      	add	r3, r2
 8005d70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d8a:	801a      	strh	r2, [r3, #0]
 8005d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b3e      	cmp	r3, #62	; 0x3e
 8005d9a:	d92b      	bls.n	8005df4 <USB_EPStartXfer+0x1008>
 8005d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	095b      	lsrs	r3, r3, #5
 8005daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d104      	bne.n	8005dcc <USB_EPStartXfer+0xfe0>
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	029b      	lsls	r3, r3, #10
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	4313      	orrs	r3, r2
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	e070      	b.n	8005ed6 <USB_EPStartXfer+0x10ea>
 8005df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10c      	bne.n	8005e1e <USB_EPStartXfer+0x1032>
 8005e04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e1a:	801a      	strh	r2, [r3, #0]
 8005e1c:	e05b      	b.n	8005ed6 <USB_EPStartXfer+0x10ea>
 8005e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	085b      	lsrs	r3, r3, #1
 8005e2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d004      	beq.n	8005e4e <USB_EPStartXfer+0x1062>
 8005e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e48:	3301      	adds	r3, #1
 8005e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	029b      	lsls	r3, r3, #10
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	4313      	orrs	r3, r2
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e68:	801a      	strh	r2, [r3, #0]
 8005e6a:	e034      	b.n	8005ed6 <USB_EPStartXfer+0x10ea>
 8005e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	785b      	ldrb	r3, [r3, #1]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d12c      	bne.n	8005ed6 <USB_EPStartXfer+0x10ea>
 8005e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	011a      	lsls	r2, r3, #4
 8005eb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005eb8:	4413      	add	r3, r2
 8005eba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ed4:	801a      	strh	r2, [r3, #0]
 8005ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	785b      	ldrb	r3, [r3, #1]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f040 809d 	bne.w	8006030 <USB_EPStartXfer+0x1244>
 8005ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	011a      	lsls	r2, r3, #4
 8005f2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f32:	4413      	add	r3, r2
 8005f34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f4e:	801a      	strh	r2, [r3, #0]
 8005f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f5e:	d92b      	bls.n	8005fb8 <USB_EPStartXfer+0x11cc>
 8005f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 031f 	and.w	r3, r3, #31
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d104      	bne.n	8005f90 <USB_EPStartXfer+0x11a4>
 8005f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	029b      	lsls	r3, r3, #10
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fb4:	801a      	strh	r2, [r3, #0]
 8005fb6:	e069      	b.n	800608c <USB_EPStartXfer+0x12a0>
 8005fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10c      	bne.n	8005fe2 <USB_EPStartXfer+0x11f6>
 8005fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fde:	801a      	strh	r2, [r3, #0]
 8005fe0:	e054      	b.n	800608c <USB_EPStartXfer+0x12a0>
 8005fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d004      	beq.n	8006012 <USB_EPStartXfer+0x1226>
 8006008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800600c:	3301      	adds	r3, #1
 800600e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006012:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29a      	uxth	r2, r3
 800601a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601e:	b29b      	uxth	r3, r3
 8006020:	029b      	lsls	r3, r3, #10
 8006022:	b29b      	uxth	r3, r3
 8006024:	4313      	orrs	r3, r2
 8006026:	b29a      	uxth	r2, r3
 8006028:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800602c:	801a      	strh	r2, [r3, #0]
 800602e:	e02d      	b.n	800608c <USB_EPStartXfer+0x12a0>
 8006030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	785b      	ldrb	r3, [r3, #1]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d125      	bne.n	800608c <USB_EPStartXfer+0x12a0>
 8006040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800604e:	b29b      	uxth	r3, r3
 8006050:	461a      	mov	r2, r3
 8006052:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006056:	4413      	add	r3, r2
 8006058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800605c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	011a      	lsls	r2, r3, #4
 800606a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800606e:	4413      	add	r3, r2
 8006070:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006074:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	b29a      	uxth	r2, r3
 8006086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800608a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800608c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 8218 	beq.w	80064ce <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800609e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80060be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80060c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d005      	beq.n	80060d6 <USB_EPStartXfer+0x12ea>
 80060ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80060ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10d      	bne.n	80060f2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80060d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80060da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f040 81f5 	bne.w	80064ce <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80060e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80060e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f040 81ee 	bne.w	80064ce <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80060f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006118:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800611c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	441a      	add	r2, r3
 8006136:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800613a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006146:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800614a:	b29b      	uxth	r3, r3
 800614c:	8013      	strh	r3, [r2, #0]
 800614e:	e1be      	b.n	80064ce <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	78db      	ldrb	r3, [r3, #3]
 800615c:	2b01      	cmp	r3, #1
 800615e:	f040 81b4 	bne.w	80064ca <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	429a      	cmp	r2, r3
 800617c:	d917      	bls.n	80061ae <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800617e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800618e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619e:	1ad2      	subs	r2, r2, r3
 80061a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	619a      	str	r2, [r3, #24]
 80061ac:	e00e      	b.n	80061cc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80061ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80061be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2200      	movs	r2, #0
 80061ca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80061cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f040 8085 	bne.w	80062e8 <USB_EPStartXfer+0x14fc>
 80061de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006202:	4413      	add	r3, r2
 8006204:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	011a      	lsls	r2, r3, #4
 8006216:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800621a:	4413      	add	r3, r2
 800621c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006220:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006224:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006230:	b29a      	uxth	r2, r3
 8006232:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006236:	801a      	strh	r2, [r3, #0]
 8006238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800623c:	2b3e      	cmp	r3, #62	; 0x3e
 800623e:	d923      	bls.n	8006288 <USB_EPStartXfer+0x149c>
 8006240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800624a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	2b00      	cmp	r3, #0
 8006254:	d104      	bne.n	8006260 <USB_EPStartXfer+0x1474>
 8006256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800625a:	3b01      	subs	r3, #1
 800625c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006260:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	b29a      	uxth	r2, r3
 8006268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626c:	b29b      	uxth	r3, r3
 800626e:	029b      	lsls	r3, r3, #10
 8006270:	b29b      	uxth	r3, r3
 8006272:	4313      	orrs	r3, r2
 8006274:	b29b      	uxth	r3, r3
 8006276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800627e:	b29a      	uxth	r2, r3
 8006280:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006284:	801a      	strh	r2, [r3, #0]
 8006286:	e060      	b.n	800634a <USB_EPStartXfer+0x155e>
 8006288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10c      	bne.n	80062aa <USB_EPStartXfer+0x14be>
 8006290:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062a6:	801a      	strh	r2, [r3, #0]
 80062a8:	e04f      	b.n	800634a <USB_EPStartXfer+0x155e>
 80062aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ae:	085b      	lsrs	r3, r3, #1
 80062b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d004      	beq.n	80062ca <USB_EPStartXfer+0x14de>
 80062c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c4:	3301      	adds	r3, #1
 80062c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	029b      	lsls	r3, r3, #10
 80062da:	b29b      	uxth	r3, r3
 80062dc:	4313      	orrs	r3, r2
 80062de:	b29a      	uxth	r2, r3
 80062e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062e4:	801a      	strh	r2, [r3, #0]
 80062e6:	e030      	b.n	800634a <USB_EPStartXfer+0x155e>
 80062e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	785b      	ldrb	r3, [r3, #1]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d128      	bne.n	800634a <USB_EPStartXfer+0x155e>
 80062f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006314:	b29b      	uxth	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800631c:	4413      	add	r3, r2
 800631e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	011a      	lsls	r2, r3, #4
 8006330:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006334:	4413      	add	r3, r2
 8006336:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800633a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800633e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006342:	b29a      	uxth	r2, r3
 8006344:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	2b00      	cmp	r3, #0
 8006366:	f040 8085 	bne.w	8006474 <USB_EPStartXfer+0x1688>
 800636a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006386:	b29b      	uxth	r3, r3
 8006388:	461a      	mov	r2, r3
 800638a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800638e:	4413      	add	r3, r2
 8006390:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	011a      	lsls	r2, r3, #4
 80063a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063a6:	4413      	add	r3, r2
 80063a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063bc:	b29a      	uxth	r2, r3
 80063be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063c2:	801a      	strh	r2, [r3, #0]
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c8:	2b3e      	cmp	r3, #62	; 0x3e
 80063ca:	d923      	bls.n	8006414 <USB_EPStartXfer+0x1628>
 80063cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d0:	095b      	lsrs	r3, r3, #5
 80063d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d104      	bne.n	80063ec <USB_EPStartXfer+0x1600>
 80063e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063e6:	3b01      	subs	r3, #1
 80063e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	029b      	lsls	r3, r3, #10
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	4313      	orrs	r3, r2
 8006400:	b29b      	uxth	r3, r3
 8006402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800640a:	b29a      	uxth	r2, r3
 800640c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006410:	801a      	strh	r2, [r3, #0]
 8006412:	e05c      	b.n	80064ce <USB_EPStartXfer+0x16e2>
 8006414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10c      	bne.n	8006436 <USB_EPStartXfer+0x164a>
 800641c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642c:	b29a      	uxth	r2, r3
 800642e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006432:	801a      	strh	r2, [r3, #0]
 8006434:	e04b      	b.n	80064ce <USB_EPStartXfer+0x16e2>
 8006436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <USB_EPStartXfer+0x166a>
 800644c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006450:	3301      	adds	r3, #1
 8006452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006456:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29a      	uxth	r2, r3
 800645e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006462:	b29b      	uxth	r3, r3
 8006464:	029b      	lsls	r3, r3, #10
 8006466:	b29b      	uxth	r3, r3
 8006468:	4313      	orrs	r3, r2
 800646a:	b29a      	uxth	r2, r3
 800646c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006470:	801a      	strh	r2, [r3, #0]
 8006472:	e02c      	b.n	80064ce <USB_EPStartXfer+0x16e2>
 8006474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d124      	bne.n	80064ce <USB_EPStartXfer+0x16e2>
 8006484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006488:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006492:	b29b      	uxth	r3, r3
 8006494:	461a      	mov	r2, r3
 8006496:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800649a:	4413      	add	r3, r2
 800649c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	011a      	lsls	r2, r3, #4
 80064ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064b2:	4413      	add	r3, r2
 80064b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064c6:	801a      	strh	r2, [r3, #0]
 80064c8:	e001      	b.n	80064ce <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e03a      	b.n	8006544 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80064f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006500:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006504:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006508:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800650c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800651e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	441a      	add	r2, r3
 800652a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800652e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800653a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653e:	b29b      	uxth	r3, r3
 8006540:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800654e:	b480      	push	{r7}
 8006550:	b085      	sub	sp, #20
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d020      	beq.n	80065a2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29b      	uxth	r3, r3
 800656e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006576:	81bb      	strh	r3, [r7, #12]
 8006578:	89bb      	ldrh	r3, [r7, #12]
 800657a:	f083 0310 	eor.w	r3, r3, #16
 800657e:	81bb      	strh	r3, [r7, #12]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	89bb      	ldrh	r3, [r7, #12]
 800658c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659c:	b29b      	uxth	r3, r3
 800659e:	8013      	strh	r3, [r2, #0]
 80065a0:	e01f      	b.n	80065e2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b8:	81fb      	strh	r3, [r7, #14]
 80065ba:	89fb      	ldrh	r3, [r7, #14]
 80065bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065c0:	81fb      	strh	r3, [r7, #14]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	441a      	add	r2, r3
 80065cc:	89fb      	ldrh	r3, [r7, #14]
 80065ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065de:	b29b      	uxth	r3, r3
 80065e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bc80      	pop	{r7}
 80065ec:	4770      	bx	lr

080065ee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b087      	sub	sp, #28
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	7b1b      	ldrb	r3, [r3, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f040 809d 	bne.w	800673c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d04c      	beq.n	80066a4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	823b      	strh	r3, [r7, #16]
 8006618:	8a3b      	ldrh	r3, [r7, #16]
 800661a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d01b      	beq.n	800665a <USB_EPClearStall+0x6c>
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006638:	81fb      	strh	r3, [r7, #14]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	441a      	add	r2, r3
 8006644:	89fb      	ldrh	r3, [r7, #14]
 8006646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800664a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006652:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006656:	b29b      	uxth	r3, r3
 8006658:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	78db      	ldrb	r3, [r3, #3]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d06c      	beq.n	800673c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006678:	81bb      	strh	r3, [r7, #12]
 800667a:	89bb      	ldrh	r3, [r7, #12]
 800667c:	f083 0320 	eor.w	r3, r3, #32
 8006680:	81bb      	strh	r3, [r7, #12]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	441a      	add	r2, r3
 800668c:	89bb      	ldrh	r3, [r7, #12]
 800668e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800669a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800669e:	b29b      	uxth	r3, r3
 80066a0:	8013      	strh	r3, [r2, #0]
 80066a2:	e04b      	b.n	800673c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	82fb      	strh	r3, [r7, #22]
 80066b2:	8afb      	ldrh	r3, [r7, #22]
 80066b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01b      	beq.n	80066f4 <USB_EPClearStall+0x106>
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d2:	82bb      	strh	r3, [r7, #20]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	441a      	add	r2, r3
 80066de:	8abb      	ldrh	r3, [r7, #20]
 80066e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	b29b      	uxth	r3, r3
 8006702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800670a:	827b      	strh	r3, [r7, #18]
 800670c:	8a7b      	ldrh	r3, [r7, #18]
 800670e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006712:	827b      	strh	r3, [r7, #18]
 8006714:	8a7b      	ldrh	r3, [r7, #18]
 8006716:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800671a:	827b      	strh	r3, [r7, #18]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	441a      	add	r2, r3
 8006726:	8a7b      	ldrh	r3, [r7, #18]
 8006728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800672c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006738:	b29b      	uxth	r3, r3
 800673a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr

08006748 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d103      	bne.n	8006762 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2280      	movs	r2, #128	; 0x80
 800675e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr

0800676e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr

08006782 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	bc80      	pop	{r7}
 8006794:	4770      	bx	lr

08006796 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80067a8:	68fb      	ldr	r3, [r7, #12]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bc80      	pop	{r7}
 80067b2:	4770      	bx	lr

080067b4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bc80      	pop	{r7}
 80067c8:	4770      	bx	lr

080067ca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b08b      	sub	sp, #44	; 0x2c
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	4611      	mov	r1, r2
 80067d6:	461a      	mov	r2, r3
 80067d8:	460b      	mov	r3, r1
 80067da:	80fb      	strh	r3, [r7, #6]
 80067dc:	4613      	mov	r3, r2
 80067de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80067e0:	88bb      	ldrh	r3, [r7, #4]
 80067e2:	3301      	adds	r3, #1
 80067e4:	085b      	lsrs	r3, r3, #1
 80067e6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	005a      	lsls	r2, r3, #1
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067fc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	627b      	str	r3, [r7, #36]	; 0x24
 8006802:	e01e      	b.n	8006842 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	3301      	adds	r3, #1
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	b21a      	sxth	r2, r3
 8006814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006818:	4313      	orrs	r3, r2
 800681a:	b21b      	sxth	r3, r3
 800681c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	8a7a      	ldrh	r2, [r7, #18]
 8006822:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	3302      	adds	r3, #2
 8006828:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	3302      	adds	r3, #2
 800682e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	3301      	adds	r3, #1
 8006834:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	3301      	adds	r3, #1
 800683a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	3b01      	subs	r3, #1
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1dd      	bne.n	8006804 <USB_WritePMA+0x3a>
  }
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	372c      	adds	r7, #44	; 0x2c
 800684e:	46bd      	mov	sp, r7
 8006850:	bc80      	pop	{r7}
 8006852:	4770      	bx	lr

08006854 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006854:	b480      	push	{r7}
 8006856:	b08b      	sub	sp, #44	; 0x2c
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	4611      	mov	r1, r2
 8006860:	461a      	mov	r2, r3
 8006862:	460b      	mov	r3, r1
 8006864:	80fb      	strh	r3, [r7, #6]
 8006866:	4613      	mov	r3, r2
 8006868:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800686a:	88bb      	ldrh	r3, [r7, #4]
 800686c:	085b      	lsrs	r3, r3, #1
 800686e:	b29b      	uxth	r3, r3
 8006870:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	005a      	lsls	r2, r3, #1
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006886:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
 800688c:	e01b      	b.n	80068c6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	3302      	adds	r3, #2
 800689a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	3301      	adds	r3, #1
 80068a8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	0a1b      	lsrs	r3, r3, #8
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	3301      	adds	r3, #1
 80068b8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	3302      	adds	r3, #2
 80068be:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	3b01      	subs	r3, #1
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e0      	bne.n	800688e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80068cc:	88bb      	ldrh	r3, [r7, #4]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d007      	beq.n	80068e8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	701a      	strb	r2, [r3, #0]
  }
}
 80068e8:	bf00      	nop
 80068ea:	372c      	adds	r7, #44	; 0x2c
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bc80      	pop	{r7}
 80068f0:	4770      	bx	lr

080068f2 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	460b      	mov	r3, r1
 80068fc:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80068fe:	2304      	movs	r3, #4
 8006900:	2203      	movs	r2, #3
 8006902:	2181      	movs	r1, #129	; 0x81
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 fc84 	bl	8008212 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006910:	2010      	movs	r0, #16
 8006912:	f001 fd93 	bl	800843c <USBD_static_malloc>
 8006916:	4602      	mov	r2, r0
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006928:	2302      	movs	r3, #2
 800692a:	e005      	b.n	8006938 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006932:	2200      	movs	r2, #0
 8006934:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800694c:	2181      	movs	r1, #129	; 0x81
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f001 fc85 	bl	800825e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006960:	2b00      	cmp	r3, #0
 8006962:	d009      	beq.n	8006978 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696a:	4618      	mov	r0, r3
 800696c:	f001 fd72 	bl	8008454 <USBD_static_free>
    pdev->pClassData = NULL;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006994:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d045      	beq.n	8006a3e <USBD_HID_Setup+0xba>
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	f040 80d3 	bne.w	8006b5e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	785b      	ldrb	r3, [r3, #1]
 80069bc:	3b02      	subs	r3, #2
 80069be:	2b09      	cmp	r3, #9
 80069c0:	d835      	bhi.n	8006a2e <USBD_HID_Setup+0xaa>
 80069c2:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <USBD_HID_Setup+0x44>)
 80069c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c8:	08006a1f 	.word	0x08006a1f
 80069cc:	080069ff 	.word	0x080069ff
 80069d0:	08006a2f 	.word	0x08006a2f
 80069d4:	08006a2f 	.word	0x08006a2f
 80069d8:	08006a2f 	.word	0x08006a2f
 80069dc:	08006a2f 	.word	0x08006a2f
 80069e0:	08006a2f 	.word	0x08006a2f
 80069e4:	08006a2f 	.word	0x08006a2f
 80069e8:	08006a0d 	.word	0x08006a0d
 80069ec:	080069f1 	.word	0x080069f1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	885b      	ldrh	r3, [r3, #2]
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	601a      	str	r2, [r3, #0]
          break;
 80069fc:	e01e      	b.n	8006a3c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2201      	movs	r2, #1
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 f944 	bl	8007c92 <USBD_CtlSendData>
          break;
 8006a0a:	e017      	b.n	8006a3c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	885b      	ldrh	r3, [r3, #2]
 8006a10:	0a1b      	lsrs	r3, r3, #8
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	461a      	mov	r2, r3
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	605a      	str	r2, [r3, #4]
          break;
 8006a1c:	e00e      	b.n	8006a3c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	3304      	adds	r3, #4
 8006a22:	2201      	movs	r2, #1
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 f933 	bl	8007c92 <USBD_CtlSendData>
          break;
 8006a2c:	e006      	b.n	8006a3c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f001 f8c4 	bl	8007bbe <USBD_CtlError>
          ret = USBD_FAIL;
 8006a36:	2302      	movs	r3, #2
 8006a38:	75fb      	strb	r3, [r7, #23]
          break;
 8006a3a:	bf00      	nop
      }
      break;
 8006a3c:	e096      	b.n	8006b6c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	2b0b      	cmp	r3, #11
 8006a44:	f200 8083 	bhi.w	8006b4e <USBD_HID_Setup+0x1ca>
 8006a48:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <USBD_HID_Setup+0xcc>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006a81 	.word	0x08006a81
 8006a54:	08006b4f 	.word	0x08006b4f
 8006a58:	08006b4f 	.word	0x08006b4f
 8006a5c:	08006b4f 	.word	0x08006b4f
 8006a60:	08006b4f 	.word	0x08006b4f
 8006a64:	08006b4f 	.word	0x08006b4f
 8006a68:	08006aa9 	.word	0x08006aa9
 8006a6c:	08006b4f 	.word	0x08006b4f
 8006a70:	08006b4f 	.word	0x08006b4f
 8006a74:	08006b4f 	.word	0x08006b4f
 8006a78:	08006b01 	.word	0x08006b01
 8006a7c:	08006b29 	.word	0x08006b29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d107      	bne.n	8006a9a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a8a:	f107 030e 	add.w	r3, r7, #14
 8006a8e:	2202      	movs	r2, #2
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 f8fd 	bl	8007c92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a98:	e060      	b.n	8006b5c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 f88e 	bl	8007bbe <USBD_CtlError>
            ret = USBD_FAIL;
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	75fb      	strb	r3, [r7, #23]
          break;
 8006aa6:	e059      	b.n	8006b5c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	885b      	ldrh	r3, [r3, #2]
 8006aac:	0a1b      	lsrs	r3, r3, #8
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b22      	cmp	r3, #34	; 0x22
 8006ab2:	d108      	bne.n	8006ac6 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	88db      	ldrh	r3, [r3, #6]
 8006ab8:	2b3f      	cmp	r3, #63	; 0x3f
 8006aba:	bf28      	it	cs
 8006abc:	233f      	movcs	r3, #63	; 0x3f
 8006abe:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006ac0:	4b2d      	ldr	r3, [pc, #180]	; (8006b78 <USBD_HID_Setup+0x1f4>)
 8006ac2:	61bb      	str	r3, [r7, #24]
 8006ac4:	e015      	b.n	8006af2 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	885b      	ldrh	r3, [r3, #2]
 8006aca:	0a1b      	lsrs	r3, r3, #8
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b21      	cmp	r3, #33	; 0x21
 8006ad0:	d108      	bne.n	8006ae4 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006ad2:	4b2a      	ldr	r3, [pc, #168]	; (8006b7c <USBD_HID_Setup+0x1f8>)
 8006ad4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	88db      	ldrh	r3, [r3, #6]
 8006ada:	2b09      	cmp	r3, #9
 8006adc:	bf28      	it	cs
 8006ade:	2309      	movcs	r3, #9
 8006ae0:	83fb      	strh	r3, [r7, #30]
 8006ae2:	e006      	b.n	8006af2 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 f869 	bl	8007bbe <USBD_CtlError>
            ret = USBD_FAIL;
 8006aec:	2302      	movs	r3, #2
 8006aee:	75fb      	strb	r3, [r7, #23]
            break;
 8006af0:	e034      	b.n	8006b5c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006af2:	8bfb      	ldrh	r3, [r7, #30]
 8006af4:	461a      	mov	r2, r3
 8006af6:	69b9      	ldr	r1, [r7, #24]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 f8ca 	bl	8007c92 <USBD_CtlSendData>
          break;
 8006afe:	e02d      	b.n	8006b5c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d107      	bne.n	8006b1a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	2201      	movs	r2, #1
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 f8bd 	bl	8007c92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b18:	e020      	b.n	8006b5c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 f84e 	bl	8007bbe <USBD_CtlError>
            ret = USBD_FAIL;
 8006b22:	2302      	movs	r3, #2
 8006b24:	75fb      	strb	r3, [r7, #23]
          break;
 8006b26:	e019      	b.n	8006b5c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d106      	bne.n	8006b40 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	885b      	ldrh	r3, [r3, #2]
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b3e:	e00d      	b.n	8006b5c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 f83b 	bl	8007bbe <USBD_CtlError>
            ret = USBD_FAIL;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	75fb      	strb	r3, [r7, #23]
          break;
 8006b4c:	e006      	b.n	8006b5c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 f834 	bl	8007bbe <USBD_CtlError>
          ret = USBD_FAIL;
 8006b56:	2302      	movs	r3, #2
 8006b58:	75fb      	strb	r3, [r7, #23]
          break;
 8006b5a:	bf00      	nop
      }
      break;
 8006b5c:	e006      	b.n	8006b6c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 f82c 	bl	8007bbe <USBD_CtlError>
      ret = USBD_FAIL;
 8006b66:	2302      	movs	r3, #2
 8006b68:	75fb      	strb	r3, [r7, #23]
      break;
 8006b6a:	bf00      	nop
  }

  return ret;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3720      	adds	r7, #32
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000140 	.word	0x20000140
 8006b7c:	20000128 	.word	0x20000128

08006b80 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b94:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d10c      	bne.n	8006bba <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	7b1b      	ldrb	r3, [r3, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d108      	bne.n	8006bba <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	2201      	movs	r2, #1
 8006bac:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006bae:	88fb      	ldrh	r3, [r7, #6]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	2181      	movs	r1, #129	; 0x81
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f001 fbfa 	bl	80083ae <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2222      	movs	r2, #34	; 0x22
 8006bd0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006bd2:	4b03      	ldr	r3, [pc, #12]	; (8006be0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	200000bc 	.word	0x200000bc

08006be4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2222      	movs	r2, #34	; 0x22
 8006bf0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006bf2:	4b03      	ldr	r3, [pc, #12]	; (8006c00 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bc80      	pop	{r7}
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	200000e0 	.word	0x200000e0

08006c04 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2222      	movs	r2, #34	; 0x22
 8006c10:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006c12:	4b03      	ldr	r3, [pc, #12]	; (8006c20 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bc80      	pop	{r7}
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	20000104 	.word	0x20000104

08006c24 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c36:	2200      	movs	r2, #0
 8006c38:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr
	...

08006c48 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	220a      	movs	r2, #10
 8006c54:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006c56:	4b03      	ldr	r3, [pc, #12]	; (8006c64 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	20000134 	.word	0x20000134

08006c68 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e01a      	b.n	8006cb6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	79fa      	ldrb	r2, [r7, #7]
 8006cac:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f001 fa4c 	bl	800814c <USBD_LL_Init>

  return USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d006      	beq.n	8006ce0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
 8006cde:	e001      	b.n	8006ce4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bc80      	pop	{r7}
 8006cee:	4770      	bx	lr

08006cf0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fa6f 	bl	80081dc <USBD_LL_Start>

  return USBD_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bc80      	pop	{r7}
 8006d1a:	4770      	bx	lr

08006d1c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d28:	2302      	movs	r3, #2
 8006d2a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00c      	beq.n	8006d50 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	78fa      	ldrb	r2, [r7, #3]
 8006d40:	4611      	mov	r1, r2
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	4798      	blx	r3
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	460b      	mov	r3, r1
 8006d64:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	78fa      	ldrb	r2, [r7, #3]
 8006d70:	4611      	mov	r1, r2
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	4798      	blx	r3

  return USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fed7 	bl	8007b46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006db4:	f003 031f 	and.w	r3, r3, #31
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d016      	beq.n	8006dea <USBD_LL_SetupStage+0x6a>
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d81c      	bhi.n	8006dfa <USBD_LL_SetupStage+0x7a>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <USBD_LL_SetupStage+0x4a>
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d008      	beq.n	8006dda <USBD_LL_SetupStage+0x5a>
 8006dc8:	e017      	b.n	8006dfa <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f9ca 	bl	800716c <USBD_StdDevReq>
      break;
 8006dd8:	e01a      	b.n	8006e10 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fa2c 	bl	8007240 <USBD_StdItfReq>
      break;
 8006de8:	e012      	b.n	8006e10 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa6c 	bl	80072d0 <USBD_StdEPReq>
      break;
 8006df8:	e00a      	b.n	8006e10 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 fa47 	bl	800829c <USBD_LL_StallEP>
      break;
 8006e0e:	bf00      	nop
  }

  return USBD_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b086      	sub	sp, #24
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	460b      	mov	r3, r1
 8006e24:	607a      	str	r2, [r7, #4]
 8006e26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e28:	7afb      	ldrb	r3, [r7, #11]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d14b      	bne.n	8006ec6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e34:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d134      	bne.n	8006eaa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d919      	bls.n	8006e80 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	1ad2      	subs	r2, r2, r3
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d203      	bcs.n	8006e6e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	e002      	b.n	8006e74 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 ff38 	bl	8007cee <USBD_CtlContinueRx>
 8006e7e:	e038      	b.n	8006ef2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d105      	bne.n	8006ea2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 ff35 	bl	8007d12 <USBD_CtlSendStatus>
 8006ea8:	e023      	b.n	8006ef2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eb0:	2b05      	cmp	r3, #5
 8006eb2:	d11e      	bne.n	8006ef2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f001 f9ec 	bl	800829c <USBD_LL_StallEP>
 8006ec4:	e015      	b.n	8006ef2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00d      	beq.n	8006eee <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d108      	bne.n	8006eee <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	7afa      	ldrb	r2, [r7, #11]
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	4798      	blx	r3
 8006eec:	e001      	b.n	8006ef2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e000      	b.n	8006ef4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	460b      	mov	r3, r1
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f0a:	7afb      	ldrb	r3, [r7, #11]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d17f      	bne.n	8007010 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3314      	adds	r3, #20
 8006f14:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d15c      	bne.n	8006fda <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d915      	bls.n	8006f58 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	1ad2      	subs	r2, r2, r3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 fec0 	bl	8007cca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2100      	movs	r1, #0
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f001 fa4f 	bl	80083f4 <USBD_LL_PrepareReceive>
 8006f56:	e04e      	b.n	8006ff6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	6912      	ldr	r2, [r2, #16]
 8006f60:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f64:	fb01 f202 	mul.w	r2, r1, r2
 8006f68:	1a9b      	subs	r3, r3, r2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d11c      	bne.n	8006fa8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d316      	bcc.n	8006fa8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	689a      	ldr	r2, [r3, #8]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d20f      	bcs.n	8006fa8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 fe9c 	bl	8007cca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f001 fa27 	bl	80083f4 <USBD_LL_PrepareReceive>
 8006fa6:	e026      	b.n	8006ff6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00a      	beq.n	8006fca <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d105      	bne.n	8006fca <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006fca:	2180      	movs	r1, #128	; 0x80
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f001 f965 	bl	800829c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 feb0 	bl	8007d38 <USBD_CtlReceiveStatus>
 8006fd8:	e00d      	b.n	8006ff6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	d004      	beq.n	8006fee <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d103      	bne.n	8006ff6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006fee:	2180      	movs	r1, #128	; 0x80
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f001 f953 	bl	800829c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d11d      	bne.n	800703c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f7ff fe81 	bl	8006d08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800700e:	e015      	b.n	800703c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00d      	beq.n	8007038 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007022:	2b03      	cmp	r3, #3
 8007024:	d108      	bne.n	8007038 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	7afa      	ldrb	r2, [r7, #11]
 8007030:	4611      	mov	r1, r2
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	4798      	blx	r3
 8007036:	e001      	b.n	800703c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007038:	2302      	movs	r3, #2
 800703a:	e000      	b.n	800703e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800704e:	2340      	movs	r3, #64	; 0x40
 8007050:	2200      	movs	r2, #0
 8007052:	2100      	movs	r1, #0
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 f8dc 	bl	8008212 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2240      	movs	r2, #64	; 0x40
 8007066:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800706a:	2340      	movs	r3, #64	; 0x40
 800706c:	2200      	movs	r2, #0
 800706e:	2180      	movs	r1, #128	; 0x80
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 f8ce 	bl	8008212 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2240      	movs	r2, #64	; 0x40
 8007080:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	6852      	ldr	r2, [r2, #4]
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	4611      	mov	r1, r2
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
  }

  return USBD_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	78fa      	ldrb	r2, [r7, #3]
 80070d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr

080070e6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2204      	movs	r2, #4
 80070fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	bc80      	pop	{r7}
 800710c:	4770      	bx	lr

0800710e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800711c:	2b04      	cmp	r3, #4
 800711e:	d105      	bne.n	800712c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr

08007138 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007146:	2b03      	cmp	r3, #3
 8007148:	d10b      	bne.n	8007162 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007182:	2b40      	cmp	r3, #64	; 0x40
 8007184:	d005      	beq.n	8007192 <USBD_StdDevReq+0x26>
 8007186:	2b40      	cmp	r3, #64	; 0x40
 8007188:	d84f      	bhi.n	800722a <USBD_StdDevReq+0xbe>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d009      	beq.n	80071a2 <USBD_StdDevReq+0x36>
 800718e:	2b20      	cmp	r3, #32
 8007190:	d14b      	bne.n	800722a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	4798      	blx	r3
      break;
 80071a0:	e048      	b.n	8007234 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	785b      	ldrb	r3, [r3, #1]
 80071a6:	2b09      	cmp	r3, #9
 80071a8:	d839      	bhi.n	800721e <USBD_StdDevReq+0xb2>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <USBD_StdDevReq+0x44>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	08007201 	.word	0x08007201
 80071b4:	08007215 	.word	0x08007215
 80071b8:	0800721f 	.word	0x0800721f
 80071bc:	0800720b 	.word	0x0800720b
 80071c0:	0800721f 	.word	0x0800721f
 80071c4:	080071e3 	.word	0x080071e3
 80071c8:	080071d9 	.word	0x080071d9
 80071cc:	0800721f 	.word	0x0800721f
 80071d0:	080071f7 	.word	0x080071f7
 80071d4:	080071ed 	.word	0x080071ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f9dc 	bl	8007598 <USBD_GetDescriptor>
          break;
 80071e0:	e022      	b.n	8007228 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fb3f 	bl	8007868 <USBD_SetAddress>
          break;
 80071ea:	e01d      	b.n	8007228 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fb7e 	bl	80078f0 <USBD_SetConfig>
          break;
 80071f4:	e018      	b.n	8007228 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fc07 	bl	8007a0c <USBD_GetConfig>
          break;
 80071fe:	e013      	b.n	8007228 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fc37 	bl	8007a76 <USBD_GetStatus>
          break;
 8007208:	e00e      	b.n	8007228 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fc65 	bl	8007adc <USBD_SetFeature>
          break;
 8007212:	e009      	b.n	8007228 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fc74 	bl	8007b04 <USBD_ClrFeature>
          break;
 800721c:	e004      	b.n	8007228 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fccc 	bl	8007bbe <USBD_CtlError>
          break;
 8007226:	bf00      	nop
      }
      break;
 8007228:	e004      	b.n	8007234 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fcc6 	bl	8007bbe <USBD_CtlError>
      break;
 8007232:	bf00      	nop
  }

  return ret;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop

08007240 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d005      	beq.n	8007266 <USBD_StdItfReq+0x26>
 800725a:	2b40      	cmp	r3, #64	; 0x40
 800725c:	d82e      	bhi.n	80072bc <USBD_StdItfReq+0x7c>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <USBD_StdItfReq+0x26>
 8007262:	2b20      	cmp	r3, #32
 8007264:	d12a      	bne.n	80072bc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726c:	3b01      	subs	r3, #1
 800726e:	2b02      	cmp	r3, #2
 8007270:	d81d      	bhi.n	80072ae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	889b      	ldrh	r3, [r3, #4]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b01      	cmp	r3, #1
 800727a:	d813      	bhi.n	80072a4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
 800728a:	4603      	mov	r3, r0
 800728c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	88db      	ldrh	r3, [r3, #6]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d110      	bne.n	80072b8 <USBD_StdItfReq+0x78>
 8007296:	7bfb      	ldrb	r3, [r7, #15]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10d      	bne.n	80072b8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fd38 	bl	8007d12 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072a2:	e009      	b.n	80072b8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fc89 	bl	8007bbe <USBD_CtlError>
          break;
 80072ac:	e004      	b.n	80072b8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fc84 	bl	8007bbe <USBD_CtlError>
          break;
 80072b6:	e000      	b.n	80072ba <USBD_StdItfReq+0x7a>
          break;
 80072b8:	bf00      	nop
      }
      break;
 80072ba:	e004      	b.n	80072c6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fc7d 	bl	8007bbe <USBD_CtlError>
      break;
 80072c4:	bf00      	nop
  }

  return USBD_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	889b      	ldrh	r3, [r3, #4]
 80072e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ec:	2b40      	cmp	r3, #64	; 0x40
 80072ee:	d007      	beq.n	8007300 <USBD_StdEPReq+0x30>
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	f200 8146 	bhi.w	8007582 <USBD_StdEPReq+0x2b2>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <USBD_StdEPReq+0x40>
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	f040 8141 	bne.w	8007582 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4798      	blx	r3
      break;
 800730e:	e13d      	b.n	800758c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007318:	2b20      	cmp	r3, #32
 800731a:	d10a      	bne.n	8007332 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
 800732a:	4603      	mov	r3, r0
 800732c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	e12d      	b.n	800758e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	785b      	ldrb	r3, [r3, #1]
 8007336:	2b03      	cmp	r3, #3
 8007338:	d007      	beq.n	800734a <USBD_StdEPReq+0x7a>
 800733a:	2b03      	cmp	r3, #3
 800733c:	f300 811b 	bgt.w	8007576 <USBD_StdEPReq+0x2a6>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d072      	beq.n	800742a <USBD_StdEPReq+0x15a>
 8007344:	2b01      	cmp	r3, #1
 8007346:	d03a      	beq.n	80073be <USBD_StdEPReq+0xee>
 8007348:	e115      	b.n	8007576 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007350:	2b02      	cmp	r3, #2
 8007352:	d002      	beq.n	800735a <USBD_StdEPReq+0x8a>
 8007354:	2b03      	cmp	r3, #3
 8007356:	d015      	beq.n	8007384 <USBD_StdEPReq+0xb4>
 8007358:	e02b      	b.n	80073b2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00c      	beq.n	800737a <USBD_StdEPReq+0xaa>
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	2b80      	cmp	r3, #128	; 0x80
 8007364:	d009      	beq.n	800737a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 ff96 	bl	800829c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007370:	2180      	movs	r1, #128	; 0x80
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 ff92 	bl	800829c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007378:	e020      	b.n	80073bc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fc1e 	bl	8007bbe <USBD_CtlError>
              break;
 8007382:	e01b      	b.n	80073bc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	885b      	ldrh	r3, [r3, #2]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10e      	bne.n	80073aa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00b      	beq.n	80073aa <USBD_StdEPReq+0xda>
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	2b80      	cmp	r3, #128	; 0x80
 8007396:	d008      	beq.n	80073aa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	88db      	ldrh	r3, [r3, #6]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d104      	bne.n	80073aa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 ff79 	bl	800829c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fcb1 	bl	8007d12 <USBD_CtlSendStatus>

              break;
 80073b0:	e004      	b.n	80073bc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fc02 	bl	8007bbe <USBD_CtlError>
              break;
 80073ba:	bf00      	nop
          }
          break;
 80073bc:	e0e0      	b.n	8007580 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d002      	beq.n	80073ce <USBD_StdEPReq+0xfe>
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d015      	beq.n	80073f8 <USBD_StdEPReq+0x128>
 80073cc:	e026      	b.n	800741c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00c      	beq.n	80073ee <USBD_StdEPReq+0x11e>
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	2b80      	cmp	r3, #128	; 0x80
 80073d8:	d009      	beq.n	80073ee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073da:	7bbb      	ldrb	r3, [r7, #14]
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 ff5c 	bl	800829c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073e4:	2180      	movs	r1, #128	; 0x80
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 ff58 	bl	800829c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073ec:	e01c      	b.n	8007428 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fbe4 	bl	8007bbe <USBD_CtlError>
              break;
 80073f6:	e017      	b.n	8007428 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	885b      	ldrh	r3, [r3, #2]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d112      	bne.n	8007426 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007406:	2b00      	cmp	r3, #0
 8007408:	d004      	beq.n	8007414 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 ff63 	bl	80082da <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fc7c 	bl	8007d12 <USBD_CtlSendStatus>
              }
              break;
 800741a:	e004      	b.n	8007426 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fbcd 	bl	8007bbe <USBD_CtlError>
              break;
 8007424:	e000      	b.n	8007428 <USBD_StdEPReq+0x158>
              break;
 8007426:	bf00      	nop
          }
          break;
 8007428:	e0aa      	b.n	8007580 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007430:	2b02      	cmp	r3, #2
 8007432:	d002      	beq.n	800743a <USBD_StdEPReq+0x16a>
 8007434:	2b03      	cmp	r3, #3
 8007436:	d032      	beq.n	800749e <USBD_StdEPReq+0x1ce>
 8007438:	e097      	b.n	800756a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d007      	beq.n	8007450 <USBD_StdEPReq+0x180>
 8007440:	7bbb      	ldrb	r3, [r7, #14]
 8007442:	2b80      	cmp	r3, #128	; 0x80
 8007444:	d004      	beq.n	8007450 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fbb8 	bl	8007bbe <USBD_CtlError>
                break;
 800744e:	e091      	b.n	8007574 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007454:	2b00      	cmp	r3, #0
 8007456:	da0b      	bge.n	8007470 <USBD_StdEPReq+0x1a0>
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	3310      	adds	r3, #16
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	4413      	add	r3, r2
 800746c:	3304      	adds	r3, #4
 800746e:	e00b      	b.n	8007488 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	4413      	add	r3, r2
 8007486:	3304      	adds	r3, #4
 8007488:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2202      	movs	r2, #2
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fbfb 	bl	8007c92 <USBD_CtlSendData>
              break;
 800749c:	e06a      	b.n	8007574 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800749e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	da11      	bge.n	80074ca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	f003 020f 	and.w	r2, r3, #15
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	440b      	add	r3, r1
 80074b8:	3318      	adds	r3, #24
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d117      	bne.n	80074f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fb7b 	bl	8007bbe <USBD_CtlError>
                  break;
 80074c8:	e054      	b.n	8007574 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	f003 020f 	and.w	r2, r3, #15
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	4613      	mov	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	440b      	add	r3, r1
 80074dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d104      	bne.n	80074f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fb68 	bl	8007bbe <USBD_CtlError>
                  break;
 80074ee:	e041      	b.n	8007574 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	da0b      	bge.n	8007510 <USBD_StdEPReq+0x240>
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074fe:	4613      	mov	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	3310      	adds	r3, #16
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	4413      	add	r3, r2
 800750c:	3304      	adds	r3, #4
 800750e:	e00b      	b.n	8007528 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007516:	4613      	mov	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	4413      	add	r3, r2
 8007526:	3304      	adds	r3, #4
 8007528:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <USBD_StdEPReq+0x266>
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	2b80      	cmp	r3, #128	; 0x80
 8007534:	d103      	bne.n	800753e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	e00e      	b.n	800755c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fee8 	bl	8008318 <USBD_LL_IsStallEP>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2201      	movs	r2, #1
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	e002      	b.n	800755c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2202      	movs	r2, #2
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fb95 	bl	8007c92 <USBD_CtlSendData>
              break;
 8007568:	e004      	b.n	8007574 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fb26 	bl	8007bbe <USBD_CtlError>
              break;
 8007572:	bf00      	nop
          }
          break;
 8007574:	e004      	b.n	8007580 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fb20 	bl	8007bbe <USBD_CtlError>
          break;
 800757e:	bf00      	nop
      }
      break;
 8007580:	e004      	b.n	800758c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fb1a 	bl	8007bbe <USBD_CtlError>
      break;
 800758a:	bf00      	nop
  }

  return ret;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	885b      	ldrh	r3, [r3, #2]
 80075b2:	0a1b      	lsrs	r3, r3, #8
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	3b01      	subs	r3, #1
 80075b8:	2b06      	cmp	r3, #6
 80075ba:	f200 8128 	bhi.w	800780e <USBD_GetDescriptor+0x276>
 80075be:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <USBD_GetDescriptor+0x2c>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	080075e1 	.word	0x080075e1
 80075c8:	080075f9 	.word	0x080075f9
 80075cc:	08007639 	.word	0x08007639
 80075d0:	0800780f 	.word	0x0800780f
 80075d4:	0800780f 	.word	0x0800780f
 80075d8:	080077af 	.word	0x080077af
 80075dc:	080077db 	.word	0x080077db
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	7c12      	ldrb	r2, [r2, #16]
 80075ec:	f107 0108 	add.w	r1, r7, #8
 80075f0:	4610      	mov	r0, r2
 80075f2:	4798      	blx	r3
 80075f4:	60f8      	str	r0, [r7, #12]
      break;
 80075f6:	e112      	b.n	800781e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	7c1b      	ldrb	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10d      	bne.n	800761c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	f107 0208 	add.w	r2, r7, #8
 800760c:	4610      	mov	r0, r2
 800760e:	4798      	blx	r3
 8007610:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3301      	adds	r3, #1
 8007616:	2202      	movs	r2, #2
 8007618:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800761a:	e100      	b.n	800781e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	f107 0208 	add.w	r2, r7, #8
 8007628:	4610      	mov	r0, r2
 800762a:	4798      	blx	r3
 800762c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3301      	adds	r3, #1
 8007632:	2202      	movs	r2, #2
 8007634:	701a      	strb	r2, [r3, #0]
      break;
 8007636:	e0f2      	b.n	800781e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	885b      	ldrh	r3, [r3, #2]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b05      	cmp	r3, #5
 8007640:	f200 80ac 	bhi.w	800779c <USBD_GetDescriptor+0x204>
 8007644:	a201      	add	r2, pc, #4	; (adr r2, 800764c <USBD_GetDescriptor+0xb4>)
 8007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764a:	bf00      	nop
 800764c:	08007665 	.word	0x08007665
 8007650:	08007699 	.word	0x08007699
 8007654:	080076cd 	.word	0x080076cd
 8007658:	08007701 	.word	0x08007701
 800765c:	08007735 	.word	0x08007735
 8007660:	08007769 	.word	0x08007769
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00b      	beq.n	8007688 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	7c12      	ldrb	r2, [r2, #16]
 800767c:	f107 0108 	add.w	r1, r7, #8
 8007680:	4610      	mov	r0, r2
 8007682:	4798      	blx	r3
 8007684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007686:	e091      	b.n	80077ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fa97 	bl	8007bbe <USBD_CtlError>
            err++;
 8007690:	7afb      	ldrb	r3, [r7, #11]
 8007692:	3301      	adds	r3, #1
 8007694:	72fb      	strb	r3, [r7, #11]
          break;
 8007696:	e089      	b.n	80077ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00b      	beq.n	80076bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	7c12      	ldrb	r2, [r2, #16]
 80076b0:	f107 0108 	add.w	r1, r7, #8
 80076b4:	4610      	mov	r0, r2
 80076b6:	4798      	blx	r3
 80076b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ba:	e077      	b.n	80077ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fa7d 	bl	8007bbe <USBD_CtlError>
            err++;
 80076c4:	7afb      	ldrb	r3, [r7, #11]
 80076c6:	3301      	adds	r3, #1
 80076c8:	72fb      	strb	r3, [r7, #11]
          break;
 80076ca:	e06f      	b.n	80077ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	7c12      	ldrb	r2, [r2, #16]
 80076e4:	f107 0108 	add.w	r1, r7, #8
 80076e8:	4610      	mov	r0, r2
 80076ea:	4798      	blx	r3
 80076ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ee:	e05d      	b.n	80077ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa63 	bl	8007bbe <USBD_CtlError>
            err++;
 80076f8:	7afb      	ldrb	r3, [r7, #11]
 80076fa:	3301      	adds	r3, #1
 80076fc:	72fb      	strb	r3, [r7, #11]
          break;
 80076fe:	e055      	b.n	80077ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	7c12      	ldrb	r2, [r2, #16]
 8007718:	f107 0108 	add.w	r1, r7, #8
 800771c:	4610      	mov	r0, r2
 800771e:	4798      	blx	r3
 8007720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007722:	e043      	b.n	80077ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa49 	bl	8007bbe <USBD_CtlError>
            err++;
 800772c:	7afb      	ldrb	r3, [r7, #11]
 800772e:	3301      	adds	r3, #1
 8007730:	72fb      	strb	r3, [r7, #11]
          break;
 8007732:	e03b      	b.n	80077ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	7c12      	ldrb	r2, [r2, #16]
 800774c:	f107 0108 	add.w	r1, r7, #8
 8007750:	4610      	mov	r0, r2
 8007752:	4798      	blx	r3
 8007754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007756:	e029      	b.n	80077ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa2f 	bl	8007bbe <USBD_CtlError>
            err++;
 8007760:	7afb      	ldrb	r3, [r7, #11]
 8007762:	3301      	adds	r3, #1
 8007764:	72fb      	strb	r3, [r7, #11]
          break;
 8007766:	e021      	b.n	80077ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	7c12      	ldrb	r2, [r2, #16]
 8007780:	f107 0108 	add.w	r1, r7, #8
 8007784:	4610      	mov	r0, r2
 8007786:	4798      	blx	r3
 8007788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800778a:	e00f      	b.n	80077ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa15 	bl	8007bbe <USBD_CtlError>
            err++;
 8007794:	7afb      	ldrb	r3, [r7, #11]
 8007796:	3301      	adds	r3, #1
 8007798:	72fb      	strb	r3, [r7, #11]
          break;
 800779a:	e007      	b.n	80077ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fa0d 	bl	8007bbe <USBD_CtlError>
          err++;
 80077a4:	7afb      	ldrb	r3, [r7, #11]
 80077a6:	3301      	adds	r3, #1
 80077a8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077aa:	e038      	b.n	800781e <USBD_GetDescriptor+0x286>
 80077ac:	e037      	b.n	800781e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7c1b      	ldrb	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077be:	f107 0208 	add.w	r2, r7, #8
 80077c2:	4610      	mov	r0, r2
 80077c4:	4798      	blx	r3
 80077c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077c8:	e029      	b.n	800781e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f9f6 	bl	8007bbe <USBD_CtlError>
        err++;
 80077d2:	7afb      	ldrb	r3, [r7, #11]
 80077d4:	3301      	adds	r3, #1
 80077d6:	72fb      	strb	r3, [r7, #11]
      break;
 80077d8:	e021      	b.n	800781e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	7c1b      	ldrb	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10d      	bne.n	80077fe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	f107 0208 	add.w	r2, r7, #8
 80077ee:	4610      	mov	r0, r2
 80077f0:	4798      	blx	r3
 80077f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3301      	adds	r3, #1
 80077f8:	2207      	movs	r2, #7
 80077fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077fc:	e00f      	b.n	800781e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f9dc 	bl	8007bbe <USBD_CtlError>
        err++;
 8007806:	7afb      	ldrb	r3, [r7, #11]
 8007808:	3301      	adds	r3, #1
 800780a:	72fb      	strb	r3, [r7, #11]
      break;
 800780c:	e007      	b.n	800781e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f9d4 	bl	8007bbe <USBD_CtlError>
      err++;
 8007816:	7afb      	ldrb	r3, [r7, #11]
 8007818:	3301      	adds	r3, #1
 800781a:	72fb      	strb	r3, [r7, #11]
      break;
 800781c:	bf00      	nop
  }

  if (err != 0U)
 800781e:	7afb      	ldrb	r3, [r7, #11]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d11c      	bne.n	800785e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007824:	893b      	ldrh	r3, [r7, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d011      	beq.n	800784e <USBD_GetDescriptor+0x2b6>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	88db      	ldrh	r3, [r3, #6]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00d      	beq.n	800784e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	88da      	ldrh	r2, [r3, #6]
 8007836:	893b      	ldrh	r3, [r7, #8]
 8007838:	4293      	cmp	r3, r2
 800783a:	bf28      	it	cs
 800783c:	4613      	movcs	r3, r2
 800783e:	b29b      	uxth	r3, r3
 8007840:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007842:	893b      	ldrh	r3, [r7, #8]
 8007844:	461a      	mov	r2, r3
 8007846:	68f9      	ldr	r1, [r7, #12]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fa22 	bl	8007c92 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	88db      	ldrh	r3, [r3, #6]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d104      	bne.n	8007860 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fa5b 	bl	8007d12 <USBD_CtlSendStatus>
 800785c:	e000      	b.n	8007860 <USBD_GetDescriptor+0x2c8>
    return;
 800785e:	bf00      	nop
    }
  }
}
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop

08007868 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	889b      	ldrh	r3, [r3, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d130      	bne.n	80078dc <USBD_SetAddress+0x74>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	88db      	ldrh	r3, [r3, #6]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d12c      	bne.n	80078dc <USBD_SetAddress+0x74>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	885b      	ldrh	r3, [r3, #2]
 8007886:	2b7f      	cmp	r3, #127	; 0x7f
 8007888:	d828      	bhi.n	80078dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	885b      	ldrh	r3, [r3, #2]
 800788e:	b2db      	uxtb	r3, r3
 8007890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007894:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789c:	2b03      	cmp	r3, #3
 800789e:	d104      	bne.n	80078aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f98b 	bl	8007bbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078a8:	e01d      	b.n	80078e6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	7bfa      	ldrb	r2, [r7, #15]
 80078ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fd5a 	bl	8008370 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fa28 	bl	8007d12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d004      	beq.n	80078d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2202      	movs	r2, #2
 80078cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d0:	e009      	b.n	80078e6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078da:	e004      	b.n	80078e6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f96d 	bl	8007bbe <USBD_CtlError>
  }
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	885b      	ldrh	r3, [r3, #2]
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	4b41      	ldr	r3, [pc, #260]	; (8007a08 <USBD_SetConfig+0x118>)
 8007902:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007904:	4b40      	ldr	r3, [pc, #256]	; (8007a08 <USBD_SetConfig+0x118>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d904      	bls.n	8007916 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f955 	bl	8007bbe <USBD_CtlError>
 8007914:	e075      	b.n	8007a02 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800791c:	2b02      	cmp	r3, #2
 800791e:	d002      	beq.n	8007926 <USBD_SetConfig+0x36>
 8007920:	2b03      	cmp	r3, #3
 8007922:	d023      	beq.n	800796c <USBD_SetConfig+0x7c>
 8007924:	e062      	b.n	80079ec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007926:	4b38      	ldr	r3, [pc, #224]	; (8007a08 <USBD_SetConfig+0x118>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d01a      	beq.n	8007964 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800792e:	4b36      	ldr	r3, [pc, #216]	; (8007a08 <USBD_SetConfig+0x118>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2203      	movs	r2, #3
 800793c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007940:	4b31      	ldr	r3, [pc, #196]	; (8007a08 <USBD_SetConfig+0x118>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff f9e8 	bl	8006d1c <USBD_SetClassConfig>
 800794c:	4603      	mov	r3, r0
 800794e:	2b02      	cmp	r3, #2
 8007950:	d104      	bne.n	800795c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f932 	bl	8007bbe <USBD_CtlError>
            return;
 800795a:	e052      	b.n	8007a02 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f9d8 	bl	8007d12 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007962:	e04e      	b.n	8007a02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f9d4 	bl	8007d12 <USBD_CtlSendStatus>
        break;
 800796a:	e04a      	b.n	8007a02 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800796c:	4b26      	ldr	r3, [pc, #152]	; (8007a08 <USBD_SetConfig+0x118>)
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d112      	bne.n	800799a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800797c:	4b22      	ldr	r3, [pc, #136]	; (8007a08 <USBD_SetConfig+0x118>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007986:	4b20      	ldr	r3, [pc, #128]	; (8007a08 <USBD_SetConfig+0x118>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff f9e4 	bl	8006d5a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f9bd 	bl	8007d12 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007998:	e033      	b.n	8007a02 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800799a:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <USBD_SetConfig+0x118>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d01d      	beq.n	80079e4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff f9d2 	bl	8006d5a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80079b6:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <USBD_SetConfig+0x118>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079c0:	4b11      	ldr	r3, [pc, #68]	; (8007a08 <USBD_SetConfig+0x118>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7ff f9a8 	bl	8006d1c <USBD_SetClassConfig>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d104      	bne.n	80079dc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f8f2 	bl	8007bbe <USBD_CtlError>
            return;
 80079da:	e012      	b.n	8007a02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f998 	bl	8007d12 <USBD_CtlSendStatus>
        break;
 80079e2:	e00e      	b.n	8007a02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f994 	bl	8007d12 <USBD_CtlSendStatus>
        break;
 80079ea:	e00a      	b.n	8007a02 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f8e5 	bl	8007bbe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80079f4:	4b04      	ldr	r3, [pc, #16]	; (8007a08 <USBD_SetConfig+0x118>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff f9ad 	bl	8006d5a <USBD_ClrClassConfig>
        break;
 8007a00:	bf00      	nop
    }
  }
}
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	20000370 	.word	0x20000370

08007a0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	88db      	ldrh	r3, [r3, #6]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d004      	beq.n	8007a28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f8cc 	bl	8007bbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a26:	e022      	b.n	8007a6e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	dc02      	bgt.n	8007a38 <USBD_GetConfig+0x2c>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	dc03      	bgt.n	8007a3e <USBD_GetConfig+0x32>
 8007a36:	e015      	b.n	8007a64 <USBD_GetConfig+0x58>
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d00b      	beq.n	8007a54 <USBD_GetConfig+0x48>
 8007a3c:	e012      	b.n	8007a64 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3308      	adds	r3, #8
 8007a48:	2201      	movs	r2, #1
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f920 	bl	8007c92 <USBD_CtlSendData>
        break;
 8007a52:	e00c      	b.n	8007a6e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3304      	adds	r3, #4
 8007a58:	2201      	movs	r2, #1
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f918 	bl	8007c92 <USBD_CtlSendData>
        break;
 8007a62:	e004      	b.n	8007a6e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f8a9 	bl	8007bbe <USBD_CtlError>
        break;
 8007a6c:	bf00      	nop
}
 8007a6e:	bf00      	nop
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a86:	3b01      	subs	r3, #1
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d81e      	bhi.n	8007aca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	88db      	ldrh	r3, [r3, #6]
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d004      	beq.n	8007a9e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f891 	bl	8007bbe <USBD_CtlError>
        break;
 8007a9c:	e01a      	b.n	8007ad4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d005      	beq.n	8007aba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f043 0202 	orr.w	r2, r3, #2
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	330c      	adds	r3, #12
 8007abe:	2202      	movs	r2, #2
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f8e5 	bl	8007c92 <USBD_CtlSendData>
      break;
 8007ac8:	e004      	b.n	8007ad4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f876 	bl	8007bbe <USBD_CtlError>
      break;
 8007ad2:	bf00      	nop
  }
}
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	885b      	ldrh	r3, [r3, #2]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d106      	bne.n	8007afc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f90b 	bl	8007d12 <USBD_CtlSendStatus>
  }
}
 8007afc:	bf00      	nop
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b14:	3b01      	subs	r3, #1
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d80b      	bhi.n	8007b32 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	885b      	ldrh	r3, [r3, #2]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d10c      	bne.n	8007b3c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f8f1 	bl	8007d12 <USBD_CtlSendStatus>
      }
      break;
 8007b30:	e004      	b.n	8007b3c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f842 	bl	8007bbe <USBD_CtlError>
      break;
 8007b3a:	e000      	b.n	8007b3e <USBD_ClrFeature+0x3a>
      break;
 8007b3c:	bf00      	nop
  }
}
 8007b3e:	bf00      	nop
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781a      	ldrb	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	785a      	ldrb	r2, [r3, #1]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	3302      	adds	r3, #2
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	3303      	adds	r3, #3
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	4413      	add	r3, r2
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	3304      	adds	r3, #4
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	3305      	adds	r3, #5
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	4413      	add	r3, r2
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	3306      	adds	r3, #6
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	3307      	adds	r3, #7
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	021b      	lsls	r3, r3, #8
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	4413      	add	r3, r2
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	80da      	strh	r2, [r3, #6]

}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bc80      	pop	{r7}
 8007bbc:	4770      	bx	lr

08007bbe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007bc8:	2180      	movs	r1, #128	; 0x80
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fb66 	bl	800829c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fb62 	bl	800829c <USBD_LL_StallEP>
}
 8007bd8:	bf00      	nop
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d032      	beq.n	8007c5c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 f834 	bl	8007c64 <USBD_GetLen>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	3301      	adds	r3, #1
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	75fa      	strb	r2, [r7, #23]
 8007c10:	461a      	mov	r2, r3
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	4413      	add	r3, r2
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	7812      	ldrb	r2, [r2, #0]
 8007c1a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	75fa      	strb	r2, [r7, #23]
 8007c22:	461a      	mov	r2, r3
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4413      	add	r3, r2
 8007c28:	2203      	movs	r2, #3
 8007c2a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c2c:	e012      	b.n	8007c54 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	60fa      	str	r2, [r7, #12]
 8007c34:	7dfa      	ldrb	r2, [r7, #23]
 8007c36:	1c51      	adds	r1, r2, #1
 8007c38:	75f9      	strb	r1, [r7, #23]
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	440a      	add	r2, r1
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c44:	7dfb      	ldrb	r3, [r7, #23]
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	75fa      	strb	r2, [r7, #23]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	4413      	add	r3, r2
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e8      	bne.n	8007c2e <USBD_GetString+0x4e>
    }
  }
}
 8007c5c:	bf00      	nop
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007c70:	e005      	b.n	8007c7e <USBD_GetLen+0x1a>
  {
    len++;
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	3301      	adds	r3, #1
 8007c76:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1f5      	bne.n	8007c72 <USBD_GetLen+0xe>
  }

  return len;
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bc80      	pop	{r7}
 8007c90:	4770      	bx	lr

08007c92 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ca8:	88fa      	ldrh	r2, [r7, #6]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007cae:	88fa      	ldrh	r2, [r7, #6]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cb4:	88fb      	ldrh	r3, [r7, #6]
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	2100      	movs	r1, #0
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 fb77 	bl	80083ae <USBD_LL_Transmit>

  return USBD_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cd8:	88fb      	ldrh	r3, [r7, #6]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	2100      	movs	r1, #0
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 fb65 	bl	80083ae <USBD_LL_Transmit>

  return USBD_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cfc:	88fb      	ldrh	r3, [r7, #6]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	2100      	movs	r1, #0
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 fb76 	bl	80083f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2204      	movs	r2, #4
 8007d1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d22:	2300      	movs	r3, #0
 8007d24:	2200      	movs	r2, #0
 8007d26:	2100      	movs	r1, #0
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fb40 	bl	80083ae <USBD_LL_Transmit>

  return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2205      	movs	r2, #5
 8007d44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d48:	2300      	movs	r3, #0
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fb50 	bl	80083f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);   // Back high - so host will enumerate
//    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);                   // Deinitialize the pin
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d64:	2200      	movs	r2, #0
 8007d66:	490e      	ldr	r1, [pc, #56]	; (8007da0 <MX_USB_DEVICE_Init+0x40>)
 8007d68:	480e      	ldr	r0, [pc, #56]	; (8007da4 <MX_USB_DEVICE_Init+0x44>)
 8007d6a:	f7fe ff7d 	bl	8006c68 <USBD_Init>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d74:	f7f8 fd7a 	bl	800086c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007d78:	490b      	ldr	r1, [pc, #44]	; (8007da8 <MX_USB_DEVICE_Init+0x48>)
 8007d7a:	480a      	ldr	r0, [pc, #40]	; (8007da4 <MX_USB_DEVICE_Init+0x44>)
 8007d7c:	f7fe ff9f 	bl	8006cbe <USBD_RegisterClass>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d86:	f7f8 fd71 	bl	800086c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d8a:	4806      	ldr	r0, [pc, #24]	; (8007da4 <MX_USB_DEVICE_Init+0x44>)
 8007d8c:	f7fe ffb0 	bl	8006cf0 <USBD_Start>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007d96:	f7f8 fd69 	bl	800086c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d9a:	bf00      	nop
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000180 	.word	0x20000180
 8007da4:	20000374 	.word	0x20000374
 8007da8:	20000084 	.word	0x20000084

08007dac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	4603      	mov	r3, r0
 8007db4:	6039      	str	r1, [r7, #0]
 8007db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	2212      	movs	r2, #18
 8007dbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007dbe:	4b03      	ldr	r3, [pc, #12]	; (8007dcc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bc80      	pop	{r7}
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	2000019c 	.word	0x2000019c

08007dd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	6039      	str	r1, [r7, #0]
 8007dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2204      	movs	r2, #4
 8007de0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007de2:	4b03      	ldr	r3, [pc, #12]	; (8007df0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bc80      	pop	{r7}
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	200001b0 	.word	0x200001b0

08007df4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	6039      	str	r1, [r7, #0]
 8007dfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d105      	bne.n	8007e12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	4907      	ldr	r1, [pc, #28]	; (8007e28 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e0a:	4808      	ldr	r0, [pc, #32]	; (8007e2c <USBD_FS_ProductStrDescriptor+0x38>)
 8007e0c:	f7ff fee8 	bl	8007be0 <USBD_GetString>
 8007e10:	e004      	b.n	8007e1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	4904      	ldr	r1, [pc, #16]	; (8007e28 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e16:	4805      	ldr	r0, [pc, #20]	; (8007e2c <USBD_FS_ProductStrDescriptor+0x38>)
 8007e18:	f7ff fee2 	bl	8007be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e1c:	4b02      	ldr	r3, [pc, #8]	; (8007e28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20000638 	.word	0x20000638
 8007e2c:	08008544 	.word	0x08008544

08007e30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	4603      	mov	r3, r0
 8007e38:	6039      	str	r1, [r7, #0]
 8007e3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	4904      	ldr	r1, [pc, #16]	; (8007e50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e40:	4804      	ldr	r0, [pc, #16]	; (8007e54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e42:	f7ff fecd 	bl	8007be0 <USBD_GetString>
  return USBD_StrDesc;
 8007e46:	4b02      	ldr	r3, [pc, #8]	; (8007e50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	20000638 	.word	0x20000638
 8007e54:	0800855c 	.word	0x0800855c

08007e58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	6039      	str	r1, [r7, #0]
 8007e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	221a      	movs	r2, #26
 8007e68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e6a:	f000 f843 	bl	8007ef4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e6e:	4b02      	ldr	r3, [pc, #8]	; (8007e78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	200001b4 	.word	0x200001b4

08007e7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	6039      	str	r1, [r7, #0]
 8007e86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	4907      	ldr	r1, [pc, #28]	; (8007eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e92:	4808      	ldr	r0, [pc, #32]	; (8007eb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e94:	f7ff fea4 	bl	8007be0 <USBD_GetString>
 8007e98:	e004      	b.n	8007ea4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	4904      	ldr	r1, [pc, #16]	; (8007eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e9e:	4805      	ldr	r0, [pc, #20]	; (8007eb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ea0:	f7ff fe9e 	bl	8007be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ea4:	4b02      	ldr	r3, [pc, #8]	; (8007eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000638 	.word	0x20000638
 8007eb4:	08008570 	.word	0x08008570

08007eb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	6039      	str	r1, [r7, #0]
 8007ec2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d105      	bne.n	8007ed6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	4907      	ldr	r1, [pc, #28]	; (8007eec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ece:	4808      	ldr	r0, [pc, #32]	; (8007ef0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ed0:	f7ff fe86 	bl	8007be0 <USBD_GetString>
 8007ed4:	e004      	b.n	8007ee0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	4904      	ldr	r1, [pc, #16]	; (8007eec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007eda:	4805      	ldr	r0, [pc, #20]	; (8007ef0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007edc:	f7ff fe80 	bl	8007be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ee0:	4b02      	ldr	r3, [pc, #8]	; (8007eec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000638 	.word	0x20000638
 8007ef0:	0800857c 	.word	0x0800857c

08007ef4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007efa:	4b0f      	ldr	r3, [pc, #60]	; (8007f38 <Get_SerialNum+0x44>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f00:	4b0e      	ldr	r3, [pc, #56]	; (8007f3c <Get_SerialNum+0x48>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f06:	4b0e      	ldr	r3, [pc, #56]	; (8007f40 <Get_SerialNum+0x4c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4413      	add	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d009      	beq.n	8007f2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f1a:	2208      	movs	r2, #8
 8007f1c:	4909      	ldr	r1, [pc, #36]	; (8007f44 <Get_SerialNum+0x50>)
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 f814 	bl	8007f4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f24:	2204      	movs	r2, #4
 8007f26:	4908      	ldr	r1, [pc, #32]	; (8007f48 <Get_SerialNum+0x54>)
 8007f28:	68b8      	ldr	r0, [r7, #8]
 8007f2a:	f000 f80f 	bl	8007f4c <IntToUnicode>
  }
}
 8007f2e:	bf00      	nop
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	1ffff7e8 	.word	0x1ffff7e8
 8007f3c:	1ffff7ec 	.word	0x1ffff7ec
 8007f40:	1ffff7f0 	.word	0x1ffff7f0
 8007f44:	200001b6 	.word	0x200001b6
 8007f48:	200001c6 	.word	0x200001c6

08007f4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f5e:	2300      	movs	r3, #0
 8007f60:	75fb      	strb	r3, [r7, #23]
 8007f62:	e027      	b.n	8007fb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	0f1b      	lsrs	r3, r3, #28
 8007f68:	2b09      	cmp	r3, #9
 8007f6a:	d80b      	bhi.n	8007f84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	0f1b      	lsrs	r3, r3, #28
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	4619      	mov	r1, r3
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	440b      	add	r3, r1
 8007f7c:	3230      	adds	r2, #48	; 0x30
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	701a      	strb	r2, [r3, #0]
 8007f82:	e00a      	b.n	8007f9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	0f1b      	lsrs	r3, r3, #28
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
 8007f8c:	005b      	lsls	r3, r3, #1
 8007f8e:	4619      	mov	r1, r3
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	440b      	add	r3, r1
 8007f94:	3237      	adds	r2, #55	; 0x37
 8007f96:	b2d2      	uxtb	r2, r2
 8007f98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	011b      	lsls	r3, r3, #4
 8007f9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	4413      	add	r3, r2
 8007faa:	2200      	movs	r2, #0
 8007fac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007fae:	7dfb      	ldrb	r3, [r7, #23]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	75fb      	strb	r3, [r7, #23]
 8007fb4:	7dfa      	ldrb	r2, [r7, #23]
 8007fb6:	79fb      	ldrb	r3, [r7, #7]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d3d3      	bcc.n	8007f64 <IntToUnicode+0x18>
  }
}
 8007fbc:	bf00      	nop
 8007fbe:	bf00      	nop
 8007fc0:	371c      	adds	r7, #28
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bc80      	pop	{r7}
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a0d      	ldr	r2, [pc, #52]	; (800800c <HAL_PCD_MspInit+0x44>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d113      	bne.n	8008002 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007fda:	4b0d      	ldr	r3, [pc, #52]	; (8008010 <HAL_PCD_MspInit+0x48>)
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	4a0c      	ldr	r2, [pc, #48]	; (8008010 <HAL_PCD_MspInit+0x48>)
 8007fe0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007fe4:	61d3      	str	r3, [r2, #28]
 8007fe6:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <HAL_PCD_MspInit+0x48>)
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	2014      	movs	r0, #20
 8007ff8:	f7f8 ff41 	bl	8000e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007ffc:	2014      	movs	r0, #20
 8007ffe:	f7f8 ff5a 	bl	8000eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008002:	bf00      	nop
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	40005c00 	.word	0x40005c00
 8008010:	40021000 	.word	0x40021000

08008014 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008028:	4619      	mov	r1, r3
 800802a:	4610      	mov	r0, r2
 800802c:	f7fe fea8 	bl	8006d80 <USBD_LL_SetupStage>
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800804a:	78fa      	ldrb	r2, [r7, #3]
 800804c:	6879      	ldr	r1, [r7, #4]
 800804e:	4613      	mov	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	440b      	add	r3, r1
 8008058:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	4619      	mov	r1, r3
 8008062:	f7fe feda 	bl	8006e1a <USBD_LL_DataOutStage>
}
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b082      	sub	sp, #8
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	460b      	mov	r3, r1
 8008078:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008080:	78fa      	ldrb	r2, [r7, #3]
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	00db      	lsls	r3, r3, #3
 800808c:	440b      	add	r3, r1
 800808e:	333c      	adds	r3, #60	; 0x3c
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	78fb      	ldrb	r3, [r7, #3]
 8008094:	4619      	mov	r1, r3
 8008096:	f7fe ff31 	bl	8006efc <USBD_LL_DataInStage>
}
 800809a:	bf00      	nop
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b082      	sub	sp, #8
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff f841 	bl	8007138 <USBD_LL_SOF>
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080c6:	2301      	movs	r3, #1
 80080c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d001      	beq.n	80080d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80080d2:	f7f8 fbcb 	bl	800086c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80080dc:	7bfa      	ldrb	r2, [r7, #15]
 80080de:	4611      	mov	r1, r2
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fe fff1 	bl	80070c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fe ffaa 	bl	8007046 <USBD_LL_Reset>
}
 80080f2:	bf00      	nop
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe ffeb 	bl	80070e6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d005      	beq.n	8008124 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008118:	4b04      	ldr	r3, [pc, #16]	; (800812c <HAL_PCD_SuspendCallback+0x30>)
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	4a03      	ldr	r2, [pc, #12]	; (800812c <HAL_PCD_SuspendCallback+0x30>)
 800811e:	f043 0306 	orr.w	r3, r3, #6
 8008122:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	e000ed00 	.word	0xe000ed00

08008130 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800813e:	4618      	mov	r0, r3
 8008140:	f7fe ffe5 	bl	800710e <USBD_LL_Resume>
}
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008154:	4a1f      	ldr	r2, [pc, #124]	; (80081d4 <USBD_LL_Init+0x88>)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a1d      	ldr	r2, [pc, #116]	; (80081d4 <USBD_LL_Init+0x88>)
 8008160:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008164:	4b1b      	ldr	r3, [pc, #108]	; (80081d4 <USBD_LL_Init+0x88>)
 8008166:	4a1c      	ldr	r2, [pc, #112]	; (80081d8 <USBD_LL_Init+0x8c>)
 8008168:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800816a:	4b1a      	ldr	r3, [pc, #104]	; (80081d4 <USBD_LL_Init+0x88>)
 800816c:	2208      	movs	r2, #8
 800816e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008170:	4b18      	ldr	r3, [pc, #96]	; (80081d4 <USBD_LL_Init+0x88>)
 8008172:	2202      	movs	r2, #2
 8008174:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008176:	4b17      	ldr	r3, [pc, #92]	; (80081d4 <USBD_LL_Init+0x88>)
 8008178:	2200      	movs	r2, #0
 800817a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800817c:	4b15      	ldr	r3, [pc, #84]	; (80081d4 <USBD_LL_Init+0x88>)
 800817e:	2200      	movs	r2, #0
 8008180:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008182:	4b14      	ldr	r3, [pc, #80]	; (80081d4 <USBD_LL_Init+0x88>)
 8008184:	2200      	movs	r2, #0
 8008186:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008188:	4812      	ldr	r0, [pc, #72]	; (80081d4 <USBD_LL_Init+0x88>)
 800818a:	f7f9 fa50 	bl	800162e <HAL_PCD_Init>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008194:	f7f8 fb6a 	bl	800086c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800819e:	2318      	movs	r3, #24
 80081a0:	2200      	movs	r2, #0
 80081a2:	2100      	movs	r1, #0
 80081a4:	f7fa ff58 	bl	8003058 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081ae:	2358      	movs	r3, #88	; 0x58
 80081b0:	2200      	movs	r2, #0
 80081b2:	2180      	movs	r1, #128	; 0x80
 80081b4:	f7fa ff50 	bl	8003058 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081c2:	2200      	movs	r2, #0
 80081c4:	2181      	movs	r1, #129	; 0x81
 80081c6:	f7fa ff47 	bl	8003058 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	20000838 	.word	0x20000838
 80081d8:	40005c00 	.word	0x40005c00

080081dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7f9 fb1a 	bl	800182c <HAL_PCD_Start>
 80081f8:	4603      	mov	r3, r0
 80081fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 f93c 	bl	800847c <USBD_Get_USB_Status>
 8008204:	4603      	mov	r3, r0
 8008206:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008208:	7bbb      	ldrb	r3, [r7, #14]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	4608      	mov	r0, r1
 800821c:	4611      	mov	r1, r2
 800821e:	461a      	mov	r2, r3
 8008220:	4603      	mov	r3, r0
 8008222:	70fb      	strb	r3, [r7, #3]
 8008224:	460b      	mov	r3, r1
 8008226:	70bb      	strb	r3, [r7, #2]
 8008228:	4613      	mov	r3, r2
 800822a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800822c:	2300      	movs	r3, #0
 800822e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800823a:	78bb      	ldrb	r3, [r7, #2]
 800823c:	883a      	ldrh	r2, [r7, #0]
 800823e:	78f9      	ldrb	r1, [r7, #3]
 8008240:	f7f9 fc6f 	bl	8001b22 <HAL_PCD_EP_Open>
 8008244:	4603      	mov	r3, r0
 8008246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	4618      	mov	r0, r3
 800824c:	f000 f916 	bl	800847c <USBD_Get_USB_Status>
 8008250:	4603      	mov	r3, r0
 8008252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008254:	7bbb      	ldrb	r3, [r7, #14]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	460b      	mov	r3, r1
 8008268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008278:	78fa      	ldrb	r2, [r7, #3]
 800827a:	4611      	mov	r1, r2
 800827c:	4618      	mov	r0, r3
 800827e:	f7f9 fcad 	bl	8001bdc <HAL_PCD_EP_Close>
 8008282:	4603      	mov	r3, r0
 8008284:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	4618      	mov	r0, r3
 800828a:	f000 f8f7 	bl	800847c <USBD_Get_USB_Status>
 800828e:	4603      	mov	r3, r0
 8008290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008292:	7bbb      	ldrb	r3, [r7, #14]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082b6:	78fa      	ldrb	r2, [r7, #3]
 80082b8:	4611      	mov	r1, r2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7f9 fd3e 	bl	8001d3c <HAL_PCD_EP_SetStall>
 80082c0:	4603      	mov	r3, r0
 80082c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f8d8 	bl	800847c <USBD_Get_USB_Status>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	460b      	mov	r3, r1
 80082e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082f4:	78fa      	ldrb	r2, [r7, #3]
 80082f6:	4611      	mov	r1, r2
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7f9 fd7f 	bl	8001dfc <HAL_PCD_EP_ClrStall>
 80082fe:	4603      	mov	r3, r0
 8008300:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	4618      	mov	r0, r3
 8008306:	f000 f8b9 	bl	800847c <USBD_Get_USB_Status>
 800830a:	4603      	mov	r3, r0
 800830c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800830e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800832a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800832c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008330:	2b00      	cmp	r3, #0
 8008332:	da0c      	bge.n	800834e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008334:	78fb      	ldrb	r3, [r7, #3]
 8008336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800833a:	68f9      	ldr	r1, [r7, #12]
 800833c:	1c5a      	adds	r2, r3, #1
 800833e:	4613      	mov	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	440b      	add	r3, r1
 8008348:	3302      	adds	r3, #2
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	e00b      	b.n	8008366 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800834e:	78fb      	ldrb	r3, [r7, #3]
 8008350:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008354:	68f9      	ldr	r1, [r7, #12]
 8008356:	4613      	mov	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	00db      	lsls	r3, r3, #3
 800835e:	440b      	add	r3, r1
 8008360:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008364:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	bc80      	pop	{r7}
 800836e:	4770      	bx	lr

08008370 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800838a:	78fa      	ldrb	r2, [r7, #3]
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f7f9 fba2 	bl	8001ad8 <HAL_PCD_SetAddress>
 8008394:	4603      	mov	r3, r0
 8008396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 f86e 	bl	800847c <USBD_Get_USB_Status>
 80083a0:	4603      	mov	r3, r0
 80083a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b086      	sub	sp, #24
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	607a      	str	r2, [r7, #4]
 80083b8:	461a      	mov	r2, r3
 80083ba:	460b      	mov	r3, r1
 80083bc:	72fb      	strb	r3, [r7, #11]
 80083be:	4613      	mov	r3, r2
 80083c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083d0:	893b      	ldrh	r3, [r7, #8]
 80083d2:	7af9      	ldrb	r1, [r7, #11]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	f7f9 fc7a 	bl	8001cce <HAL_PCD_EP_Transmit>
 80083da:	4603      	mov	r3, r0
 80083dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083de:	7dfb      	ldrb	r3, [r7, #23]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 f84b 	bl	800847c <USBD_Get_USB_Status>
 80083e6:	4603      	mov	r3, r0
 80083e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	607a      	str	r2, [r7, #4]
 80083fe:	461a      	mov	r2, r3
 8008400:	460b      	mov	r3, r1
 8008402:	72fb      	strb	r3, [r7, #11]
 8008404:	4613      	mov	r3, r2
 8008406:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008416:	893b      	ldrh	r3, [r7, #8]
 8008418:	7af9      	ldrb	r1, [r7, #11]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	f7f9 fc26 	bl	8001c6c <HAL_PCD_EP_Receive>
 8008420:	4603      	mov	r3, r0
 8008422:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	4618      	mov	r0, r3
 8008428:	f000 f828 	bl	800847c <USBD_Get_USB_Status>
 800842c:	4603      	mov	r3, r0
 800842e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008430:	7dbb      	ldrb	r3, [r7, #22]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008444:	4b02      	ldr	r3, [pc, #8]	; (8008450 <USBD_static_malloc+0x14>)
}
 8008446:	4618      	mov	r0, r3
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	bc80      	pop	{r7}
 800844e:	4770      	bx	lr
 8008450:	20000b28 	.word	0x20000b28

08008454 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]

}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	bc80      	pop	{r7}
 8008464:	4770      	bx	lr

08008466 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	460b      	mov	r3, r1
 8008470:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	bc80      	pop	{r7}
 800847a:	4770      	bx	lr

0800847c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	4603      	mov	r3, r0
 8008484:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800848a:	79fb      	ldrb	r3, [r7, #7]
 800848c:	2b03      	cmp	r3, #3
 800848e:	d817      	bhi.n	80084c0 <USBD_Get_USB_Status+0x44>
 8008490:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <USBD_Get_USB_Status+0x1c>)
 8008492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008496:	bf00      	nop
 8008498:	080084a9 	.word	0x080084a9
 800849c:	080084af 	.word	0x080084af
 80084a0:	080084b5 	.word	0x080084b5
 80084a4:	080084bb 	.word	0x080084bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	73fb      	strb	r3, [r7, #15]
    break;
 80084ac:	e00b      	b.n	80084c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084ae:	2302      	movs	r3, #2
 80084b0:	73fb      	strb	r3, [r7, #15]
    break;
 80084b2:	e008      	b.n	80084c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084b4:	2301      	movs	r3, #1
 80084b6:	73fb      	strb	r3, [r7, #15]
    break;
 80084b8:	e005      	b.n	80084c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084ba:	2302      	movs	r3, #2
 80084bc:	73fb      	strb	r3, [r7, #15]
    break;
 80084be:	e002      	b.n	80084c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80084c0:	2302      	movs	r3, #2
 80084c2:	73fb      	strb	r3, [r7, #15]
    break;
 80084c4:	bf00      	nop
  }
  return usb_status;
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bc80      	pop	{r7}
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop

080084d4 <memset>:
 80084d4:	4603      	mov	r3, r0
 80084d6:	4402      	add	r2, r0
 80084d8:	4293      	cmp	r3, r2
 80084da:	d100      	bne.n	80084de <memset+0xa>
 80084dc:	4770      	bx	lr
 80084de:	f803 1b01 	strb.w	r1, [r3], #1
 80084e2:	e7f9      	b.n	80084d8 <memset+0x4>

080084e4 <__libc_init_array>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	2600      	movs	r6, #0
 80084e8:	4d0c      	ldr	r5, [pc, #48]	; (800851c <__libc_init_array+0x38>)
 80084ea:	4c0d      	ldr	r4, [pc, #52]	; (8008520 <__libc_init_array+0x3c>)
 80084ec:	1b64      	subs	r4, r4, r5
 80084ee:	10a4      	asrs	r4, r4, #2
 80084f0:	42a6      	cmp	r6, r4
 80084f2:	d109      	bne.n	8008508 <__libc_init_array+0x24>
 80084f4:	f000 f81a 	bl	800852c <_init>
 80084f8:	2600      	movs	r6, #0
 80084fa:	4d0a      	ldr	r5, [pc, #40]	; (8008524 <__libc_init_array+0x40>)
 80084fc:	4c0a      	ldr	r4, [pc, #40]	; (8008528 <__libc_init_array+0x44>)
 80084fe:	1b64      	subs	r4, r4, r5
 8008500:	10a4      	asrs	r4, r4, #2
 8008502:	42a6      	cmp	r6, r4
 8008504:	d105      	bne.n	8008512 <__libc_init_array+0x2e>
 8008506:	bd70      	pop	{r4, r5, r6, pc}
 8008508:	f855 3b04 	ldr.w	r3, [r5], #4
 800850c:	4798      	blx	r3
 800850e:	3601      	adds	r6, #1
 8008510:	e7ee      	b.n	80084f0 <__libc_init_array+0xc>
 8008512:	f855 3b04 	ldr.w	r3, [r5], #4
 8008516:	4798      	blx	r3
 8008518:	3601      	adds	r6, #1
 800851a:	e7f2      	b.n	8008502 <__libc_init_array+0x1e>
 800851c:	080085b0 	.word	0x080085b0
 8008520:	080085b0 	.word	0x080085b0
 8008524:	080085b0 	.word	0x080085b0
 8008528:	080085b4 	.word	0x080085b4

0800852c <_init>:
 800852c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852e:	bf00      	nop
 8008530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008532:	bc08      	pop	{r3}
 8008534:	469e      	mov	lr, r3
 8008536:	4770      	bx	lr

08008538 <_fini>:
 8008538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853a:	bf00      	nop
 800853c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853e:	bc08      	pop	{r3}
 8008540:	469e      	mov	lr, r3
 8008542:	4770      	bx	lr
